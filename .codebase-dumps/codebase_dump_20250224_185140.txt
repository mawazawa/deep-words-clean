🗂 DeepType Codebase Dump
📅 Generated on: Mon Feb 24 18:51:40 PST 2025
═══════════════════════════════════════════════════

📌 Core System Files
───────────────────────────────────────────────────
📂 Component Files
───────────────────────────────────────────────────

🟦 File: src/lib/api/types/api-types.ts
───────────────────────────────────────────────────
```ts
/**
 * API Types
 * Defines shared types and interfaces for all API services
 */

// Base API response interface
export interface ApiResponse<T> {
  data?: T;
  error?: ApiError;
  status: number;
  success: boolean;
}

// Standard error interface
export interface ApiError {
  code: string;
  message: string;
  details?: unknown;
}

// Image generation types
export interface ImageGenerationRequest {
  prompt: string;
  width?: number;
  height?: number;
  enhancePrompt?: boolean;
  style?: 'realistic' | 'artistic' | 'minimalist' | 'educational';
}

export interface ImageGenerationResponse {
  url: string;
  prompt: string;
  model?: string;
  error?: ApiError;
  fallback?: boolean;
  width?: number;
  height?: number;
}

// Perplexity language API types
export interface LanguageRequest {
  query: string;
  maxTokens?: number;
  temperature?: number;
  contextItems?: string[];
}

export interface LanguageResponse {
  text: string;
  sources?: {
    title: string;
    url: string;
    snippet: string;
  }[];
  tokens: {
    total: number;
    prompt: number;
    completion: number;
  };
  model: string;
}

// Grok creative suggestions API types
export interface SuggestionRequest {
  word: string;
  count?: number;
  creativity?: number; // 0-1 scale
  includeSynonyms?: boolean;
  includeAntonyms?: boolean;
  includeRelated?: boolean;
}

export interface SuggestionResponse {
  suggestions: WordSuggestion[];
  metadata: {
    model: string;
    requestedWord: string;
    totalResults: number;
  };
}

export interface WordSuggestion {
  word: string;
  type: 'synonym' | 'antonym' | 'related' | 'rhyme' | 'creative';
  score: number;
  definition?: string;
  examples?: string[];
}

// API configuration types
export interface ApiServiceConfig {
  baseUrl: string;
  apiKey?: string;
  defaultTimeout?: number;
  defaultHeaders?: Record<string, string>;
  retryCount?: number;
}

// Cache configuration types
export interface CacheConfig {
  staleTime: number; // milliseconds
  cacheTime: number; // milliseconds
  retry: number;
}```


🟦 File: src/hooks/use-word-suggestions.ts
───────────────────────────────────────────────────
```ts
'use client';

import { useCallback } from 'react';
import { SWRConfiguration } from 'swr';
import { useApi } from './use-api';
import { grokService } from '@/lib/api';
import { SuggestionRequest, SuggestionResponse } from '@/lib/api/types/api-types';
import { LANGUAGE_SWR_CONFIG } from '@/lib/swr-config';

/**
 * Hook for word suggestions using Grok API
 * Provides a cached, optimized interface to the Grok service
 */
export function useWordSuggestions(
  word: string | null,
  options?: Partial<SuggestionRequest>,
  config?: SWRConfiguration
) {
  // Only create a key if we have a word
  const key = word ? `word-suggestions-${word}-${JSON.stringify(options)}` : null;

  // Use our custom API hook with the Grok service
  const api = useApi<SuggestionResponse>(
    key,
    async () => {
      if (!word) {
        throw new Error('No word provided for suggestions');
      }

      // Prepare the request with defaults and overrides
      const request: SuggestionRequest = {
        word,
        count: 10,
        creativity: 0.7,
        includeSynonyms: true,
        includeAntonyms: true,
        includeRelated: true,
        ...options,
      };

      // Call the Grok service
      return grokService.getSuggestions(request);
    },
    {
      ...LANGUAGE_SWR_CONFIG,
      ...config,
    }
  );

  // Convenience method to get suggestions by type
  const getSuggestionsByType = useCallback((type: string) => {
    if (!api.data?.suggestions) return [];
    return api.data.suggestions.filter(s => s.type === type);
  }, [api.data]);

  // Convenience methods for specific types
  const synonyms = getSuggestionsByType('synonym');
  const antonyms = getSuggestionsByType('antonym');
  const related = getSuggestionsByType('related');
  const creative = getSuggestionsByType('creative');

  // Check if API key is available
  const isApiKeyMissing = api.error?.code === 'GROK_AUTH_ERROR';

  // For dev/demo: fall back to mock data if API key is missing
  if (isApiKeyMissing && process.env.NODE_ENV === 'development' && word) {
    return {
      ...api,
      data: grokService.getMockSuggestions(word),
      isApiKeyMissing,
      synonyms: [], // Add mock data by type
      antonyms: [],
      related: [],
      creative: [],
    };
  }

  return {
    ...api,
    isApiKeyMissing,
    getSuggestionsByType,
    synonyms,
    antonyms,
    related,
    creative,
  };
}```


🟦 File: src/hooks/use-language-context.ts
───────────────────────────────────────────────────
```ts
'use client';

import { SWRConfiguration } from 'swr';
import { useApi } from './use-api';
import { perplexityService } from '@/lib/api';
import { LanguageRequest, LanguageResponse } from '@/lib/api/types/api-types';
import { LANGUAGE_SWR_CONFIG } from '@/lib/swr-config';

/**
 * Hook for contextual language queries using Perplexity API
 * Provides a cached interface to the Perplexity service
 */
export function useLanguageContext(
  query: string | null,
  options?: Partial<LanguageRequest>,
  config?: SWRConfiguration
) {
  // Only create a key if we have a query
  const key = query ? `language-context-${query}-${JSON.stringify(options)}` : null;

  // Use our custom API hook with the Perplexity service
  const api = useApi<LanguageResponse>(
    key,
    async () => {
      if (!query) {
        throw new Error('No query provided for language context');
      }

      // Prepare the request with defaults and overrides
      const request: LanguageRequest = {
        query,
        maxTokens: 300,
        temperature: 0.7,
        contextItems: [],
        ...options,
      };

      // Call the Perplexity service
      return perplexityService.query(request);
    },
    {
      ...LANGUAGE_SWR_CONFIG,
      ...config,
    }
  );

  // Extract token usage for monitoring/display
  const tokenUsage = api.data?.tokens;

  // Check if API key is available
  const isApiKeyMissing = api.error?.code === 'PERPLEXITY_AUTH_ERROR';

  // For dev/demo: fall back to mock data if API key is missing
  if (isApiKeyMissing && process.env.NODE_ENV === 'development' && query) {
    return {
      ...api,
      data: {
        text: `This is mock language data for the query: "${query}"`,
        model: 'mock-model',
        tokens: {
          total: 0,
          prompt: 0,
          completion: 0,
        },
      },
      isApiKeyMissing,
      tokenUsage: null,
    };
  }

  return {
    ...api,
    isApiKeyMissing,
    tokenUsage,
  };
}```


🟦 File: src/hooks/use-image-generation.ts
───────────────────────────────────────────────────
```ts
"use client";

import { useState, useCallback } from 'react';
import { SWRConfiguration } from 'swr';
import { useApi } from './use-api';
import { fluxService } from '@/lib/api';
import { ImageGenerationRequest, ImageGenerationResponse } from '@/lib/api/types/api-types';
import { IMAGE_SWR_CONFIG } from '@/lib/swr-config';

/**
 * Enhanced hook for generating images using our API service layer
 * Provides a cached, optimized interface to the Flux service
 */
export function useImageGeneration(
  word: string | null,
  options?: Partial<ImageGenerationRequest>,
  config?: SWRConfiguration
) {
  // Only trigger the fetch when explicitly requested
  const [shouldFetch, setShouldFetch] = useState(false);

  // Create cache key with word and options for proper caching
  const key = shouldFetch && word
    ? `image-gen-${word}-${JSON.stringify(options)}`
    : null;

  // Use our API hook with the Flux service
  const api = useApi<ImageGenerationResponse>(
    key,
    async () => {
      if (!word) {
        throw new Error('No word provided for image generation');
      }

      // Prepare the request with defaults and overrides
      const request: ImageGenerationRequest = {
        prompt: word,
        width: 512,
        height: 512,
        enhancePrompt: true,
        style: 'minimalist',
        ...options,
      };

      // Call the Flux service
      return fluxService.generateImage(request);
    },
    {
      ...IMAGE_SWR_CONFIG,
      ...config,
      // Override revalidation for image generation to be conservative
      revalidateOnFocus: false,
      dedupingInterval: 3600000, // 1 hour
    }
  );

  // Function to trigger image generation
  const generateImage = useCallback(() => {
    setShouldFetch(true);
  }, []);

  // Function to reset and try again
  const reset = useCallback(() => {
    api.refresh();
  }, [api]);

  // Check if using fallback
  const isFallback = api.data?.fallback === true;

  return {
    ...api,
    generateImage,
    reset,
    isFallback,
  };
}```


🟦 File: src/hooks/use-claude-analysis.ts
───────────────────────────────────────────────────
```ts
'use client';

import { SWRConfiguration } from 'swr';
import { useApi } from './use-api';
import { anthropicService } from '@/lib/api';
import { LANGUAGE_SWR_CONFIG } from '@/lib/swr-config';

/**
 * Type for the linguistic analysis response
 */
interface LinguisticAnalysis {
  etymology: {
    origin: string;
    history: string;
    derivation?: string;
  };
  semantics: {
    meaning: string;
    nuances: string[];
    domains?: string[];
  };
  usage: {
    common_phrases: string[];
    collocations: string[];
    examples: string[];
  };
  related: {
    synonyms: string[];
    antonyms: string[];
    conceptual: string[];
  };
  register: {
    formality: string;
    connotation: string;
    contexts: string[];
  };
  model: string;
  tokens: {
    total: number;
    prompt: number;
    completion: number;
  };
}

/**
 * Custom hook for advanced linguistic analysis using Claude
 * This hook caches results and provides a clean interface to the Anthropic service
 */
export function useClaudeAnalysis(
  word: string | null,
  config?: SWRConfiguration
) {
  // Only create a key if we have a word
  const key = word ? `claude-analysis-${word}` : null;

  // Use our API hook with the Anthropic service
  const api = useApi<LinguisticAnalysis>(
    key,
    async () => {
      if (!word) {
        throw new Error('No word provided for linguistic analysis');
      }

      // Create a detailed prompt for linguistic analysis
      const prompt = `Analyze the word "${word}" in depth, considering its etymology, semantics, usage patterns, and related concepts.`;

      // Call the Anthropic service
      return anthropicService.analyzeLanguage(prompt);
    },
    {
      ...LANGUAGE_SWR_CONFIG,
      ...config,
      // Increase dedupingInterval since linguistic analyses don't change often
      dedupingInterval: 3600000, // 1 hour
    }
  );

  // Check if API key is missing
  const isApiKeyMissing = api.error?.code === 'ANTHROPIC_AUTH_ERROR';

  // For dev/demo: fall back to mock data if API key is missing
  if (isApiKeyMissing && process.env.NODE_ENV === 'development' && word) {
    return {
      ...api,
      data: getMockAnalysis(word),
      isApiKeyMissing,
    };
  }

  return {
    ...api,
    isApiKeyMissing,
  };
}

/**
 * Generate mock linguistic analysis for development and testing
 */
function getMockAnalysis(word: string): LinguisticAnalysis {
  return {
    etymology: {
      origin: "Mock Latin origin",
      history: `Mock historical development of the word "${word}"`,
      derivation: "Mock word derivation",
    },
    semantics: {
      meaning: `Primary meaning of "${word}"`,
      nuances: ["Mock nuance 1", "Mock nuance 2", "Mock nuance 3"],
      domains: ["General", "Academic"],
    },
    usage: {
      common_phrases: [`${word} and related term`, `Another common use of ${word}`],
      collocations: [`adjective ${word}`, `${word} noun`],
      examples: [
        `Here is an example sentence using "${word}".`,
        `Another example of "${word}" in context.`,
      ],
    },
    related: {
      synonyms: ["mock-synonym-1", "mock-synonym-2"],
      antonyms: ["mock-antonym-1", "mock-antonym-2"],
      conceptual: ["mock-related-1", "mock-related-2"],
    },
    register: {
      formality: "Neutral to formal",
      connotation: "Neutral",
      contexts: ["Academic", "Literary", "Everyday"],
    },
    model: "mock-claude-model",
    tokens: {
      total: 0,
      prompt: 0,
      completion: 0,
    },
  };
}```


🟦 File: src/hooks/use-api.ts
───────────────────────────────────────────────────
```ts
'use client';

import { useState, useCallback } from 'react';
import useSWR, { SWRConfiguration, SWRResponse } from 'swr';
import { SWR_CONFIG } from '@/lib/swr-config';
import { ApiResponse } from '@/lib/api/types/api-types';

/**
 * Type for the fetcherFn to ensure it returns a Promise with ApiResponse<T>
 */
type ApiFetcherFn<T> = (...args: any[]) => Promise<ApiResponse<T>>;

/**
 * Type for direct data updates
 */
interface MutateOptions<T> {
  data?: T;
  error?: Error;
  revalidate?: boolean;
}

/**
 * Custom hook for API calls using SWR
 * Provides consistent error handling, loading states, and caching
 */
export function useApi<T>(
  key: string | null,
  fetcherFn: ApiFetcherFn<T>,
  config?: SWRConfiguration
) {
  // Track if the operation is in manual update process (e.g. during form submission)
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Use SWR for data fetching with configuration
  const {
    data: apiResponse,
    error: swrError,
    isLoading,
    isValidating,
    mutate,
  } = useSWR<ApiResponse<T>>(
    key,
    fetcherFn,
    {
      ...SWR_CONFIG, // Global defaults
      ...config,     // Component-specific overrides
    }
  );

  // Extract API data and errors
  const data = apiResponse?.data;
  const error = swrError || apiResponse?.error;

  // Create a clean isLoading state that includes both SWR loading and manual submitting
  const isApiLoading = isLoading || isSubmitting;

  // Helper for manual mutations with loading state
  const updateData = useCallback(
    async (fn: () => Promise<ApiResponse<T>>, options?: MutateOptions<T>) => {
      try {
        setIsSubmitting(true);

        // If optimistic update data provided, update immediately
        if (options?.data || options?.error) {
          await mutate({
            data: options.data,
            error: options.error,
            status: options.error ? 400 : 200,
            success: !options.error,
          } as ApiResponse<T>, { revalidate: false });
        }

        // Call the update function
        const result = await fn();

        // Update the cache with the result
        await mutate(result, { revalidate: options?.revalidate ?? false });

        return result;
      } catch (err) {
        // Create an error response
        const errorResponse: ApiResponse<T> = {
          data: undefined,
          error: {
            code: 'UNHANDLED_ERROR',
            message: err instanceof Error ? err.message : String(err),
          },
          status: 500,
          success: false,
        };

        // Update the cache with the error
        await mutate(errorResponse, { revalidate: false });

        return errorResponse;
      } finally {
        setIsSubmitting(false);
      }
    },
    [mutate]
  );

  // Create a function to reset the cache and force a fresh fetch
  const refresh = useCallback(() => {
    return mutate(undefined, { revalidate: true });
  }, [mutate]);

  return {
    data,
    error,
    apiResponse,
    isLoading: isApiLoading,
    isValidating,
    isSubmitting,
    mutate,
    updateData,
    refresh,
  };
}

/**
 * Specialized hook for image generation
 */
export function useImageGeneration(
  word: string | null,
  config?: SWRConfiguration
) {
  const [generateImage, setGenerateImage] = useState<boolean>(false);

  // Only fetch if explicitly triggered
  const key = generateImage && word ? `image-gen-${word}` : null;

  const api = useApi(
    key,
    async () => {
      const response = await fetch('/api/generate-image', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ prompt: word }),
      });

      const data = await response.json();
      return {
        data,
        status: response.status,
        success: response.ok,
        error: !response.ok ? { code: 'API_ERROR', message: data.message || 'Failed to generate image' } : undefined,
      };
    },
    config
  );

  const generate = useCallback(() => {
    setGenerateImage(true);
  }, []);

  return {
    ...api,
    generate,
  };
}```


🟦 File: src/lib/api/perplexity-service.ts
───────────────────────────────────────────────────
```ts
/**
 * Perplexity Language Service
 * Handles contextual language understanding with Perplexity AI
 */
import { ApiService } from './api-service';
import {
  ApiResponse,
  LanguageRequest,
  LanguageResponse
} from './types/api-types';
import { AI_CONFIG } from '@/lib/ai-config';

export class PerplexityService extends ApiService {
  private defaultModel: string;

  constructor() {
    const { apiUrl, apiKey, defaultModel } = AI_CONFIG.perplexity;

    super('PerplexityService', {
      baseUrl: apiUrl || 'https://api.perplexity.ai',
      apiKey,
      defaultTimeout: 20000,
    });

    this.defaultModel = defaultModel || 'sonar-small-online';
  }

  /**
   * Query the Perplexity API for contextual language understanding
   */
  public async query(request: LanguageRequest): Promise<ApiResponse<LanguageResponse>> {
    // Check if API key is available
    if (!this.config.apiKey) {
      console.warn('⚠️ No Perplexity API key found.');
      return {
        error: {
          code: 'PERPLEXITY_AUTH_ERROR',
          message: 'No API key provided for Perplexity AI',
        },
        status: 401,
        success: false,
      };
    }

    try {
      const response = await this.post<LanguageResponse>('/api/query', {
        query: request.query,
        model: this.defaultModel,
        max_tokens: request.maxTokens || 500,
        temperature: request.temperature || 0.7,
        context_items: request.contextItems || [],
      });

      // Enhanced logging for development
      if (process.env.NODE_ENV === 'development' && response.data) {
        console.log(`📚 Perplexity response for query "${request.query.substring(0, 30)}...":`, {
          tokens: response.data.tokens,
          model: response.data.model,
          sourceCount: response.data.sources?.length || 0,
        });
      }

      return response;
    } catch (error) {
      console.error('❌ Error in PerplexityService.query:', error);

      return {
        error: this.handleError(error),
        status: 500,
        success: false,
      };
    }
  }

  /**
   * Get sources for citations from a previous query
   */
  public async getSources(queryId: string): Promise<ApiResponse<any>> {
    if (!this.config.apiKey) {
      return {
        error: {
          code: 'PERPLEXITY_AUTH_ERROR',
          message: 'No API key provided for Perplexity AI',
        },
        status: 401,
        success: false,
      };
    }

    return this.get<any>(`/api/sources/${queryId}`);
  }
}

// Create and export a singleton instance
export const perplexityService = new PerplexityService();```


🟦 File: src/lib/api/grok-service.ts
───────────────────────────────────────────────────
```ts
/**
 * Grok Creative Suggestions Service
 * Handles AI-powered creative word suggestions and relationships
 */
import { ApiService } from './api-service';
import {
  ApiResponse,
  SuggestionRequest,
  SuggestionResponse,
  WordSuggestion
} from './types/api-types';
import { AI_CONFIG } from '@/lib/ai-config';

export class GrokService extends ApiService {
  private defaultModel: string;

  constructor() {
    const { apiUrl, apiKey, defaultModel } = AI_CONFIG.grok;

    super('GrokService', {
      baseUrl: apiUrl || 'https://api.grok.ai',
      apiKey,
      defaultTimeout: 15000,
    });

    this.defaultModel = defaultModel || 'grok-1';
  }

  /**
   * Get creative word suggestions based on input word
   */
  public async getSuggestions(request: SuggestionRequest): Promise<ApiResponse<SuggestionResponse>> {
    // Check if API key is available
    if (!this.config.apiKey) {
      console.warn('⚠️ No Grok API key found.');
      return {
        error: {
          code: 'GROK_AUTH_ERROR',
          message: 'No API key provided for Grok AI',
        },
        status: 401,
        success: false,
      };
    }

    try {
      // Format the request
      const requestData = {
        word: request.word,
        count: request.count || 10,
        creativity: request.creativity || 0.7,
        include_synonyms: request.includeSynonyms !== false,
        include_antonyms: request.includeAntonyms !== false,
        include_related: request.includeRelated !== false,
        model: this.defaultModel,
      };

      // Call Grok API
      const response = await this.post<SuggestionResponse>('/api/suggestions', requestData);

      // Enhanced logging for development
      if (process.env.NODE_ENV === 'development' && response.data) {
        console.log(`🔮 Grok suggestion response for word "${request.word}":`, {
          suggestionCount: response.data.suggestions?.length || 0,
          model: response.data.metadata?.model,
        });
      }

      return response;
    } catch (error) {
      console.error('❌ Error in GrokService.getSuggestions:', error);

      return {
        error: this.handleError(error),
        status: 500,
        success: false,
      };
    }
  }

  /**
   * Get in-depth information about a specific word
   */
  public async getWordInfo(word: string): Promise<ApiResponse<any>> {
    if (!this.config.apiKey) {
      return {
        error: {
          code: 'GROK_AUTH_ERROR',
          message: 'No API key provided for Grok AI',
        },
        status: 401,
        success: false,
      };
    }

    return this.get<any>(`/api/wordinfo/${encodeURIComponent(word)}`);
  }

  /**
   * Generate mock suggestions when API is unavailable (for development and testing)
   */
  public getMockSuggestions(word: string): SuggestionResponse {
    const mockTypes: Array<WordSuggestion['type']> = ['synonym', 'antonym', 'related', 'rhyme', 'creative'];

    // Generate 10 mock suggestions
    const suggestions: WordSuggestion[] = Array.from({ length: 10 }, (_, i) => {
      const type = mockTypes[Math.floor(Math.random() * mockTypes.length)];
      return {
        word: `${word}-${type}-${i + 1}`,
        type,
        score: Math.random(),
        definition: `This is a mock definition for ${word}-${i + 1}`,
        examples: [`Example usage of ${word}-${i + 1}`],
      };
    });

    return {
      suggestions,
      metadata: {
        model: 'mock-model',
        requestedWord: word,
        totalResults: suggestions.length,
      },
    };
  }
}

// Create and export a singleton instance
export const grokService = new GrokService();```


🟦 File: src/lib/api/flux-service.ts
───────────────────────────────────────────────────
```ts
/**
 * Flux Image Generation Service
 * Handles image generation via Replicate's Flux model with consistent error handling and fallbacks
 */
import { ApiService } from './api-service';
import {
  ApiResponse,
  ImageGenerationRequest,
  ImageGenerationResponse
} from './types/api-types';
import { AI_CONFIG } from '@/lib/ai-config';

export class FluxService extends ApiService {
  private fallbackEnabled: boolean;
  private fallbackImages: string[];
  private placeholderUrl: string;
  private fluxModel: string;

  constructor() {
    // Configure from our AI configuration
    const { apiToken, fluxModel, fallback } = AI_CONFIG.replicate;
    // Use a default API URL for Replicate
    const baseUrl = 'https://api.replicate.com';

    super('FluxService', {
      baseUrl,
      apiKey: apiToken,
      defaultTimeout: 30000, // Image generation takes longer
    });

    this.fluxModel = fluxModel || 'black-forest-labs/flux-1.1-pro';
    this.fallbackEnabled = fallback.enabled;
    this.fallbackImages = fallback.localImages;
    this.placeholderUrl = fallback.placeholderUrl;
  }

  /**
   * Generate an image from a text prompt
   */
  public async generateImage(request: ImageGenerationRequest): Promise<ApiResponse<ImageGenerationResponse>> {
    // Check if API token is available
    if (!this.config.apiKey) {
      console.warn('⚠️ No Replicate API token found. Using fallback image.');
      return this.createFallbackResponse(request.prompt, 'No API token configured');
    }

    try {
      // Enhance prompt if needed
      const prompt = request.enhancePrompt !== false
        ? this.enhancePrompt(request.prompt, request.style || 'minimalist')
        : request.prompt;

      // For direct Replicate API access, we'd use their SDK
      // But for consistent error handling, we'll use our API layer to call the server-side endpoint
      const response = await this.post<ImageGenerationResponse>('/api/generate-image', {
        prompt,
        width: request.width || 512,
        height: request.height || 512,
        style: request.style,
      });

      // If there was an error from the API but we have fallbacks, use them
      if (!response.success && this.fallbackEnabled) {
        return this.createFallbackResponse(
          request.prompt,
          response.error?.message || 'Failed to generate image'
        );
      }

      return response;
    } catch (error) {
      console.error('❌ Error in FluxService.generateImage:', error);
      return this.createFallbackResponse(
        request.prompt,
        error instanceof Error ? error.message : String(error)
      );
    }
  }

  /**
   * Get a random fallback image or placeholder
   */
  public getFallbackImage(): string {
    if (!this.fallbackEnabled || this.fallbackImages.length === 0) {
      return this.placeholderUrl;
    }

    // Select random image from fallback options
    const randomIndex = Math.floor(Math.random() * this.fallbackImages.length);
    return this.fallbackImages[randomIndex];
  }

  /**
   * Creates a successful response with a fallback image
   */
  private createFallbackResponse(
    prompt: string,
    errorMessage: string
  ): ApiResponse<ImageGenerationResponse> {
    return {
      data: {
        url: this.getFallbackImage(),
        prompt,
        error: {
          code: 'FALLBACK_USED',
          message: errorMessage,
        },
        fallback: true,
      },
      status: 200,
      success: true, // We return success here since we're providing a fallback
    };
  }

  /**
   * Enhances the user prompt for better image generation results
   */
  private enhancePrompt(basePrompt: string, style: string): string {
    const stylePrompts: Record<string, string> = {
      minimalist: 'minimalist style, elegant design, clean composition',
      artistic: 'artistic, creative, expressive, vibrant colors',
      realistic: 'photorealistic, detailed, lifelike, high-definition',
      educational: 'educational, instructive, clear visualization, informative',
    };

    const styleAddition = stylePrompts[style] || stylePrompts.minimalist;

    // Add styling and quality keywords to improve generation results
    return `${basePrompt}, high quality, detailed, 4k, professional, ${styleAddition}`;
  }
}

// Create and export a singleton instance
export const fluxService = new FluxService();```


🟦 File: src/lib/api/api-service.ts
───────────────────────────────────────────────────
```ts
/**
 * Base API Service
 * Provides core functionality for all API services with consistent error handling and logging
 */
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { ApiResponse, ApiError, ApiServiceConfig } from './types/api-types';

export class ApiService {
  protected client: AxiosInstance;
  protected serviceName: string;
  protected config: ApiServiceConfig;

  constructor(serviceName: string, config: ApiServiceConfig) {
    this.serviceName = serviceName;
    this.config = config;

    // Create axios instance with service configuration
    this.client = axios.create({
      baseURL: config.baseUrl,
      timeout: config.defaultTimeout || 15000,
      headers: {
        'Content-Type': 'application/json',
        ...(config.apiKey && { Authorization: `Bearer ${config.apiKey}` }),
        ...config.defaultHeaders,
      },
    });

    // Add request interceptor for logging
    this.client.interceptors.request.use((request) => {
      if (process.env.NODE_ENV === 'development') {
        console.log(`🔷 [${this.serviceName}] API Request:`, {
          url: request.url,
          method: request.method,
          // Omit sensitive headers like Authorization
          headers: { ...request.headers, Authorization: '[REDACTED]' },
          // Omit sensitive data
          data: this.sanitizeLogData(request.data),
        });
      }
      return request;
    });

    // Add response interceptor for logging
    this.client.interceptors.response.use(
      (response) => {
        if (process.env.NODE_ENV === 'development') {
          console.log(`✅ [${this.serviceName}] API Response:`, {
            status: response.status,
            statusText: response.statusText,
            data: this.sanitizeLogData(response.data),
          });
        }
        return response;
      },
      (error: AxiosError) => {
        if (process.env.NODE_ENV === 'development') {
          console.error(`❌ [${this.serviceName}] API Error:`, {
            message: error.message,
            status: error.response?.status,
            data: error.response?.data ? this.sanitizeLogData(error.response.data) : undefined,
          });
        }
        return Promise.reject(error);
      }
    );
  }

  /**
   * Sanitize sensitive data before logging
   */
  private sanitizeLogData(data: any): any {
    if (!data) return data;

    // Create a copy to avoid modifying the original
    const sanitized = { ...data };

    // Redact common sensitive fields
    const sensitiveFields = ['apiKey', 'password', 'token', 'secret', 'Authorization'];
    sensitiveFields.forEach((field) => {
      if (sanitized[field]) {
        sanitized[field] = '[REDACTED]';
      }
    });

    return sanitized;
  }

  /**
   * Standardized error handler
   */
  protected handleError(error: unknown): ApiError {
    if (axios.isAxiosError(error)) {
      const axiosError = error as AxiosError<any>;

      return {
        code: axiosError.code || `${this.serviceName}_ERROR`,
        message: axiosError.response?.data?.error || axiosError.message || 'Unknown API error',
        details: axiosError.response?.data,
      };
    }

    if (error instanceof Error) {
      return {
        code: `${this.serviceName}_ERROR`,
        message: error.message,
        details: error.stack,
      };
    }

    return {
      code: `${this.serviceName}_UNKNOWN_ERROR`,
      message: 'An unexpected error occurred',
      details: String(error),
    };
  }

  /**
   * Perform GET request with standardized response format
   */
  protected async get<T>(url: string, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {
    try {
      const response: AxiosResponse<T> = await this.client.get(url, config);
      return {
        data: response.data,
        status: response.status,
        success: true,
      };
    } catch (error) {
      const apiError = this.handleError(error);
      return {
        error: apiError,
        status: axios.isAxiosError(error) ? error.response?.status || 500 : 500,
        success: false,
      };
    }
  }

  /**
   * Perform POST request with standardized response format
   */
  protected async post<T, D = any>(url: string, data?: D, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {
    try {
      const response: AxiosResponse<T> = await this.client.post(url, data, config);
      return {
        data: response.data,
        status: response.status,
        success: true,
      };
    } catch (error) {
      const apiError = this.handleError(error);
      return {
        error: apiError,
        status: axios.isAxiosError(error) ? error.response?.status || 500 : 500,
        success: false,
      };
    }
  }
}```


🟦 File: src/lib/api/anthropic-service.ts
───────────────────────────────────────────────────
```ts
/**
 * Anthropic Claude Service
 * Handles advanced language understanding with Claude 3.7 Sonnet model
 */
import { ApiService } from './api-service';
import {
  ApiResponse,
  LanguageRequest,
  LanguageResponse
} from './types/api-types';
import { AI_CONFIG } from '@/lib/ai-config';

export class AnthropicService extends ApiService {
  private defaultModel: string;

  constructor() {
    // Get configuration from AI_CONFIG
    const { apiUrl, apiKey, defaultModel } = AI_CONFIG.anthropic || {};

    super('AnthropicService', {
      baseUrl: apiUrl || 'https://api.anthropic.com',
      apiKey,
      defaultHeaders: {
        'anthropic-version': '2023-06-01', // Use the latest API version
        'Content-Type': 'application/json',
      },
      defaultTimeout: 30000, // Claude can take longer for complex queries
    });

    this.defaultModel = defaultModel || 'claude-3-7-sonnet';
  }

  /**
   * Send a query to Claude for advanced language understanding
   */
  public async query(request: LanguageRequest): Promise<ApiResponse<LanguageResponse>> {
    // Check if API key is available
    if (!this.config.apiKey) {
      console.warn('⚠️ No Anthropic API key found.');
      return {
        error: {
          code: 'ANTHROPIC_AUTH_ERROR',
          message: 'No API key provided for Anthropic Claude',
        },
        status: 401,
        success: false,
      };
    }

    try {
      // Format request for Claude API
      const claudeRequest = {
        model: this.defaultModel,
        messages: [
          { role: 'user', content: request.query }
        ],
        max_tokens: request.maxTokens || 1000,
        temperature: request.temperature || 0.5,
        system: "You are Claude, a highly sophisticated AI language model specialized in providing detailed linguistic analysis, deep contextual understanding, and precise semantic exploration. Craft thorough, educational responses that help users understand language nuances."
      };

      // Call Claude API with proper endpoint
      const response = await this.post<any>('/v1/messages', claudeRequest);

      // Enhanced logging for development
      if (process.env.NODE_ENV === 'development' && response.data) {
        console.log(`🧠 Claude response for query "${request.query.substring(0, 30)}...":`, {
          model: response.data.model,
          usage: response.data.usage,
        });
      }

      // Transform Claude response format to our standard LanguageResponse
      if (response.success && response.data) {
        const claudeResponse = response.data;

        return {
          data: {
            text: claudeResponse.content?.[0]?.text || '',
            model: claudeResponse.model,
            tokens: {
              total: claudeResponse.usage?.input_tokens + claudeResponse.usage?.output_tokens,
              prompt: claudeResponse.usage?.input_tokens,
              completion: claudeResponse.usage?.output_tokens,
            },
          },
          status: response.status,
          success: true,
        };
      }

      return response as ApiResponse<LanguageResponse>;
    } catch (error) {
      console.error('❌ Error in AnthropicService.query:', error);

      return {
        error: this.handleError(error),
        status: 500,
        success: false,
      };
    }
  }

  /**
   * Generate detailed linguistic analysis for a word or phrase
   */
  public async analyzeLanguage(text: string): Promise<ApiResponse<any>> {
    if (!this.config.apiKey) {
      return {
        error: {
          code: 'ANTHROPIC_AUTH_ERROR',
          message: 'No API key provided for Anthropic Claude',
        },
        status: 401,
        success: false,
      };
    }

    const systemPrompt = `
    Analyze the provided word or phrase and provide detailed linguistic information including:
    1. Etymology and historical context
    2. Semantic analysis
    3. Common collocations and usage patterns
    4. Related concepts and semantic associations
    5. Register and connotation information

    Format your response as structured JSON with the following sections:
    - etymology
    - semantics
    - usage
    - related
    - register
    `;

    try {
      // Format request for Claude API with our analytical system prompt
      const claudeRequest = {
        model: this.defaultModel,
        messages: [
          { role: 'user', content: text }
        ],
        max_tokens: 2000,
        temperature: 0.2, // Lower temperature for more factual/analytical responses
        system: systemPrompt,
        response_format: { type: "json_object" }
      };

      // Call Claude API
      const response = await this.post<any>('/v1/messages', claudeRequest);

      // Parse JSON response if successful
      if (response.success && response.data && response.data.content) {
        try {
          const content = response.data.content[0]?.text || '{}';
          const parsedAnalysis = JSON.parse(content);

          return {
            data: {
              ...parsedAnalysis,
              model: response.data.model,
              tokens: {
                total: response.data.usage?.input_tokens + response.data.usage?.output_tokens,
                prompt: response.data.usage?.input_tokens,
                completion: response.data.usage?.output_tokens,
              },
            },
            status: response.status,
            success: true,
          };
        } catch (parseError) {
          console.error('❌ Error parsing JSON from Claude:', parseError);
          return {
            error: {
              code: 'PARSE_ERROR',
              message: 'Failed to parse Claude response as JSON',
              details: parseError instanceof Error ? parseError.message : String(parseError),
            },
            status: 500,
            success: false,
          };
        }
      }

      return response;
    } catch (error) {
      console.error('❌ Error in AnthropicService.analyzeLanguage:', error);

      return {
        error: this.handleError(error),
        status: 500,
        success: false,
      };
    }
  }
}

// Create and export a singleton instance
export const anthropicService = new AnthropicService();```


🟦 File: src/components/visual-mnemonic.tsx
───────────────────────────────────────────────────
```tsx
"use client";

import { useState, useEffect } from 'react';
import Image from 'next/image';
import { useImageGeneration } from '@/hooks/use-image-generation';
import { ImageGenerationResponse } from '@/lib/api/types/api-types';

interface VisualMnemonicProps {
  word: string;
  className?: string;
  onGenerated?: (image: ImageGenerationResponse) => void;
  size?: 'sm' | 'md' | 'lg';
}

/**
 * Visual Mnemonic component for displaying AI-generated images
 * to enhance word retention and understanding
 */
export function VisualMnemonic({
  word,
  className = '',
  onGenerated,
  size = 'md'
}: VisualMnemonicProps) {
  // Use our enhanced image generation hook
  const { generateImage, data, isLoading, error, reset, isFallback } = useImageGeneration(word);
  const [retryCount, setRetryCount] = useState(0);

  // Determine dimensions based on size prop
  const dimensions = {
    sm: { width: 200, height: 200 },
    md: { width: 300, height: 300 },
    lg: { width: 400, height: 400 },
  }[size];

  // Generate image when word changes
  useEffect(() => {
    if (word && word.trim().length > 0) {
      generateImage();

      // Notify parent component when image is generated
      if (data && onGenerated) {
        onGenerated(data);
      }
    }
  }, [word, generateImage, data, onGenerated]);

  // Handle retry button click
  const handleRetry = () => {
    setRetryCount(prev => prev + 1);
    reset();
    generateImage();
  };

  // Render loading state
  if (isLoading) {
    return (
      <div className={`glass-effect flex flex-col items-center justify-center ${className}`} style={dimensions}>
        <div className="h-10 w-10 rounded-full border-2 border-primary border-t-transparent animate-spin mb-2"></div>
        <p className="text-sm text-muted-foreground">Generating visual for "{word}"...</p>
        <p className="text-xs text-muted-foreground mt-1">This may take a moment</p>
      </div>
    );
  }

  // Render error state with retry option
  if (error && !data) {
    return (
      <div className={`glass-effect flex flex-col items-center justify-center p-4 ${className}`} style={dimensions}>
        <div className="text-destructive mb-2">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M12 8V12M12 16H12.01M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z"
                  stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
          </svg>
        </div>
        <p className="text-sm">Failed to generate visual</p>
        <button
          onClick={handleRetry}
          className="mt-2 text-xs bg-primary/10 hover:bg-primary/20 text-primary px-2 py-1 rounded-full transition-colors"
        >
          Try Again
        </button>
      </div>
    );
  }

  // Render generated image or fallback
  if (data) {
    return (
      <div className={`relative ${className}`} style={dimensions}>
        <div className="glass-effect absolute inset-0 overflow-hidden rounded-xl">
          <Image
            src={data.url}
            alt={`Visual representation of ${word}`}
            fill
            className="object-cover transition-opacity"
            sizes={`(max-width: 768px) 100vw, ${dimensions.width}px`}
            priority
          />

          {/* Show fallback badge if using fallback image */}
          {isFallback && (
            <div className="absolute bottom-2 right-2 bg-background/80 text-xs px-2 py-1 rounded-full">
              Fallback Image
            </div>
          )}

          {/* Retry button for fallback images */}
          {isFallback && retryCount < 2 && (
            <button
              onClick={handleRetry}
              className="absolute top-2 right-2 bg-background/80 hover:bg-background/95 text-xs px-2 py-1 rounded-full transition-colors"
            >
              Retry
            </button>
          )}
        </div>
      </div>
    );
  }

  // Render empty state
  return (
    <div className={`glass-effect flex items-center justify-center ${className}`} style={dimensions}>
      <p className="text-sm text-muted-foreground">Enter a word to generate a visual</p>
    </div>
  );
}```


🟦 File: src/components/ui/button.tsx
───────────────────────────────────────────────────
```tsx
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";

// Define button variants using class-variance-authority
const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
        glass: "glass-effect hover:bg-accent/10"
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

// Button component props interface
export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

/**
 * Button Component
 *
 * A versatile button component with multiple variants and sizes
 * Following the glassmorphic design language of Deep Wordsmith
 */
const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = "Button";

export { Button, buttonVariants };```


🟦 File: src/components/theme-provider.tsx
───────────────────────────────────────────────────
```tsx
"use client";

import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";
import type { ThemeProviderProps } from "next-themes/dist/types";

/**
 * Theme Provider component that wraps the application to provide theme context
 * @param props - Theme provider props (children, defaultTheme, etc.)
 * @returns Theme provider component
 */
export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}```


🟦 File: src/components/search-bar.tsx
───────────────────────────────────────────────────
```tsx
"use client";

import { useState, useRef, useEffect } from 'react';
import { debounce } from '@/lib/utils';
import { VisualMnemonic } from './visual-mnemonic';
import { ImageGenerationResponse } from '@/lib/ai-config';

/**
 * Enhanced SearchBar component with visual mnemonic integration
 * Features glassmorphic design and debounced search
 */
export default function SearchBar() {
  const [query, setQuery] = useState("");
  const [isSearching, setIsSearching] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const [generatedImage, setGeneratedImage] = useState<ImageGenerationResponse | null>(null);

  const resultsRef = useRef<HTMLDivElement>(null);

  // Close results when clicking outside
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (resultsRef.current && !resultsRef.current.contains(event.target as Node)) {
        setShowResults(false);
      }
    }

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // Mock search function that would connect to Perplexity/Grok API
  const handleSearch = debounce((searchQuery: string) => {
    // Log for development purposes
    console.log(`🔍 Searching for word: ${searchQuery}`);

    if (searchQuery.length > 0) {
      setIsSearching(true);
      // Simulate API delay
      setTimeout(() => {
        setIsSearching(false);
        setShowResults(true);
      }, 1500);
    } else {
      setShowResults(false);
    }
  }, 500);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setQuery(value);
    handleSearch(value);
  };

  // Handle image generation completion
  const handleImageGenerated = (image: ImageGenerationResponse) => {
    console.log(`🖼️ Image generated for "${query}":`, image.fallback ? '(fallback)' : '(from API)');
    setGeneratedImage(image);
  };

  return (
    <div className="relative" ref={resultsRef}>
      <div className="relative flex items-center">
        <div className="absolute left-4 text-muted-foreground">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M21 21L15 15M17 10C17 13.866 13.866 17 10 17C6.13401 17 3 13.866 3 10C3 6.13401 6.13401 3 10 3C13.866 3 17 6.13401 17 10Z"
              stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
          </svg>
        </div>

        <input
          type="text"
          placeholder="Enter a word to explore..."
          value={query}
          onChange={handleInputChange}
          className="w-full bg-background/70 dark:bg-background/40 h-14 px-12 rounded-full border border-input focus:border-primary focus:ring-1 focus:ring-primary transition-colors focus:outline-none placeholder:text-muted-foreground/70"
        />

        {isSearching && (
          <div className="absolute right-4">
            <div className="h-5 w-5 rounded-full border-2 border-primary border-t-transparent animate-spin" />
          </div>
        )}
      </div>

      {/* Search results with visual mnemonic */}
      {query.length > 0 && showResults && !isSearching && (
        <div className="glass-effect-intense absolute top-full left-0 right-0 mt-4 p-6 rounded-xl z-10">
          <div className="flex flex-col md:flex-row gap-6">
            {/* Left column: Visual mnemonic */}
            <div className="md:w-1/3">
              <VisualMnemonic
                word={query}
                size="sm"
                className="w-full aspect-square"
                onGenerated={handleImageGenerated}
              />
              <p className="text-center text-xs text-muted-foreground mt-2">
                {generatedImage?.fallback
                  ? 'Visual representation from our library'
                  : 'AI-generated visual representation'}
              </p>
            </div>

            {/* Right column: Word details */}
            <div className="md:w-2/3">
              <div className="mb-4">
                <h3 className="text-xl font-semibold">{query}</h3>
                <p className="text-sm text-muted-foreground">Visual language exploration</p>
              </div>

              <div className="space-y-4">
                <div className="glass-effect p-3 rounded-lg">
                  <p className="text-sm font-medium mb-1">Sign up to access:</p>
                  <ul className="text-sm space-y-1 text-muted-foreground">
                    <li>• Complete definition and etymology</li>
                    <li>• Related words and concepts</li>
                    <li>• Contextual usage examples</li>
                    <li>• AI-powered semantic clusters</li>
                  </ul>
                </div>

                <div className="flex items-center gap-2">
                  <button className="bg-primary text-primary-foreground py-2 px-4 rounded-full text-sm">
                    Sign Up Free
                  </button>
                  <button className="text-sm text-muted-foreground">Learn More</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}```


🟦 File: src/components/loaders/spinner.tsx
───────────────────────────────────────────────────
```tsx
/**
 * Spinner Component
 *
 * A flexible, size-customizable spinner with the app's glassmorphic design
 */
export function Spinner({
  size = 'md',
  className = '',
}) {
  // Size mapping
  const sizeMap = {
    sm: 'w-4 h-4 border-2',
    md: 'w-8 h-8 border-2',
    lg: 'w-12 h-12 border-3',
    xl: 'w-16 h-16 border-4',
  };

  const sizeClass = sizeMap[size as keyof typeof sizeMap] || sizeMap.md;

  return (
    <div
      className={`
        ${sizeClass}
        rounded-full
        border-primary
        border-t-transparent
        animate-spin
        ${className}
      `}
      aria-label="Loading"
      role="status"
    />
  );
}```


🟦 File: src/components/loaders/skeleton.tsx
───────────────────────────────────────────────────
```tsx
import { cn } from "@/lib/utils";

interface SkeletonProps {
  className?: string;
  variant?: 'default' | 'glass';
}

/**
 * Skeleton Component
 *
 * A skeleton loader component for placeholder UI
 * Uses glassmorphic design language to match the app's aesthetic
 */
export function Skeleton({
  className,
  variant = 'default'
}: SkeletonProps) {
  return (
    <div
      className={cn(
        "animate-pulse rounded-md",
        variant === 'glass'
          ? "glass-effect bg-transparent"
          : "bg-muted/40",
        className
      )}
      aria-busy="true"
      aria-hidden="true"
    />
  );
}

interface SkeletonParagraphProps {
  lines?: number;
  className?: string;
  lineClassName?: string;
  variant?: 'default' | 'glass';
}

/**
 * Paragraph Skeleton
 *
 * Creates multiple line skeletons to represent a paragraph of text
 */
export function SkeletonParagraph({
  lines = 3,
  className = '',
  lineClassName = '',
  variant = 'default'
}: SkeletonParagraphProps) {
  return (
    <div className={`space-y-2 ${className}`}>
      {Array.from({ length: lines }).map((_, i) => (
        <Skeleton
          key={i}
          className={cn(
            "h-4",
            // Vary the widths to make it look more natural
            i === lines - 1 ? "w-3/4" : "w-full",
            lineClassName
          )}
          variant={variant}
        />
      ))}
    </div>
  );
}

interface SkeletonImageProps {
  className?: string;
  aspectRatio?: string;
}

/**
 * Image Skeleton
 *
 * A specialized skeleton for image placeholders
 */
export function SkeletonImage({
  className = '',
  aspectRatio = 'aspect-square'
}: SkeletonImageProps) {
  return (
    <div className={`relative ${aspectRatio} ${className}`}>
      <Skeleton className="absolute inset-0" variant="glass" />
      <div className="absolute inset-0 flex items-center justify-center">
        <svg
          className="w-10 h-10 text-muted-foreground/30"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={1.5}
            d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
          />
        </svg>
      </div>
    </div>
  );
}```


🟦 File: src/components/loaders/index.tsx
───────────────────────────────────────────────────
```tsx
/**
 * Loading Components Export
 * Central export for all loading components
 */

// Import the components directly for internal use
import { Spinner } from './spinner';
import {
  Skeleton,
  SkeletonParagraph,
  SkeletonImage
} from './skeleton';

// Re-export all components
export { Spinner } from './spinner';
export {
  Skeleton,
  SkeletonParagraph,
  SkeletonImage
} from './skeleton';

/**
 * Word Loading Component
 *
 * A specialized loading component for word search and exploration
 */
export function WordLoading() {
  return (
    <div className="glass-effect p-6 rounded-xl flex flex-col items-center justify-center space-y-4">
      <div className="flex items-center justify-center">
        <Spinner size="lg" />
      </div>
      <p className="text-muted-foreground text-sm">Exploring linguistic possibilities...</p>
    </div>
  );
}

/**
 * Visual Mnemonic Loading Component
 *
 * A loading component specifically for visual mnemonic generation
 */
export function VisualMnemonicLoading({
  className = '',
  word = 'word'
}: {
  className?: string;
  word?: string;
}) {
  return (
    <div className={`glass-effect rounded-xl flex flex-col items-center justify-center p-4 aspect-square ${className}`}>
      <Spinner size="md" className="mb-3" />
      <p className="text-xs text-muted-foreground text-center">
        Visualizing "{word}"...
      </p>
    </div>
  );
}```


🟦 File: src/components/error-boundary/index.tsx
───────────────────────────────────────────────────
```tsx
'use client';

import React from 'react';
import { ErrorBoundary as ReactErrorBoundary, FallbackProps } from 'react-error-boundary';
import { ErrorFallback } from './error-fallback';

interface ErrorBoundaryProps {
  children: React.ReactNode;
  fallback?: React.ReactNode;
  fallbackTitle?: string;
  fallbackSubtitle?: string;
  showDetails?: boolean;
  className?: string;
  onError?: (error: Error, info: React.ErrorInfo) => void;
  onReset?: () => void;
}

/**
 * Error Boundary Component
 *
 * A wrapper component that catches errors in its children and displays a fallback UI
 * Uses the react-error-boundary package with our custom styling
 */
export function ErrorBoundary({
  children,
  fallback,
  fallbackTitle,
  fallbackSubtitle,
  showDetails,
  className,
  onError,
  onReset,
}: ErrorBoundaryProps) {
  // Log errors to console and potentially to an error tracking service
  const handleError = (error: Error, info: React.ErrorInfo) => {
    // Log to console in development
    if (process.env.NODE_ENV === 'development') {
      console.error('Error caught by ErrorBoundary:', error);
      console.error('Component stack:', info.componentStack);
    }

    // Call custom error handler if provided
    if (onError) {
      onError(error, info);
    }

    // Here you could also log to an error tracking service like Sentry
    // if available in the future
  };

  return (
    <ReactErrorBoundary
      FallbackComponent={({ error, resetErrorBoundary }: FallbackProps) =>
        fallback ? (
          <>{fallback}</>
        ) : (
          <ErrorFallback
            error={error}
            resetErrorBoundary={resetErrorBoundary}
            title={fallbackTitle}
            subtitle={fallbackSubtitle}
            showDetails={showDetails}
            className={className}
          />
        )
      }
      onError={handleError}
      onReset={onReset}
    >
      {children}
    </ReactErrorBoundary>
  );
}

// Re-export the fallback component for direct use
export { ErrorFallback } from './error-fallback';```


🟦 File: src/components/error-boundary/error-fallback.tsx
───────────────────────────────────────────────────
```tsx
import { FallbackProps } from 'react-error-boundary';
import { Button } from '@/components/ui/button';

interface ErrorFallbackProps extends FallbackProps {
  title?: string;
  subtitle?: string;
  showDetails?: boolean;
  className?: string;
}

/**
 * Error Fallback Component
 *
 * A visually polished fallback component shown when an error is caught by an ErrorBoundary
 * Maintains the app's glassmorphic design language while providing helpful error information
 */
export function ErrorFallback({
  error,
  resetErrorBoundary,
  title = 'Something went wrong',
  subtitle = 'We encountered an unexpected error',
  showDetails = process.env.NODE_ENV === 'development',
  className = '',
}: ErrorFallbackProps) {
  // Auto-log errors to console in development
  if (process.env.NODE_ENV === 'development') {
    console.error('Error caught by ErrorBoundary:', error);
  }

  return (
    <div className={`glass-effect p-6 rounded-xl overflow-hidden ${className}`}>
      <div className="flex flex-col items-center text-center space-y-4">
        {/* Error icon */}
        <div className="w-12 h-12 rounded-full bg-red-100 dark:bg-red-900/20 flex items-center justify-center text-red-600 dark:text-red-400">
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="2" />
            <path d="M12 7v6" stroke="currentColor" strokeWidth="2" strokeLinecap="round" />
            <path d="M12 17v.01" stroke="currentColor" strokeWidth="2" strokeLinecap="round" />
          </svg>
        </div>

        {/* Error title and message */}
        <div>
          <h3 className="text-lg font-medium">{title}</h3>
          <p className="text-sm text-muted-foreground mt-1">{subtitle}</p>
        </div>

        {/* Show error details in dev mode */}
        {showDetails && (
          <div className="w-full bg-muted/40 dark:bg-muted/20 rounded-lg p-3 mt-2 overflow-auto text-left">
            <p className="text-xs font-mono break-all whitespace-pre-wrap">
              {error.name}: {error.message}
              {error.stack && (
                <>
                  <br />
                  <br />
                  {error.stack}
                </>
              )}
            </p>
          </div>
        )}

        {/* Retry button */}
        <div className="mt-4">
          <Button onClick={resetErrorBoundary} variant="default">
            Try again
          </Button>
        </div>
      </div>
    </div>
  );
}```


📚 File: docs/semantic-clustering-plan.md
───────────────────────────────────────────────────
```md
# Semantic Clustering Visualization Plan

## Overview

The semantic clustering visualization is a core differentiating feature of Deep Words. It will display related words and concepts as an interactive network, allowing users to explore linguistic connections in a visually intuitive way.

## Technical Approach

### 1. Data Structure

We will represent semantic relationships as a graph:

```typescript
interface SemanticNode {
  id: string;          // Word ID
  word: string;        // The actual word
  type: 'primary' | 'synonym' | 'antonym' | 'related' | 'root';
  weight: number;      // Relationship strength (0-1)
  definitions?: string[];
  etymology?: string;
}

interface SemanticLink {
  source: string;      // Source node ID
  target: string;      // Target node ID
  type: 'synonym' | 'antonym' | 'related' | 'derivation';
  weight: number;      // Relationship strength (0-1)
}

interface SemanticGraph {
  nodes: SemanticNode[];
  links: SemanticLink[];
}
```

### 2. Data Generation

For each word search, we'll use the Perplexity or Grok API to:

1. Get synonyms, antonyms, and related terms
2. Generate similarity scores between terms
3. Determine conceptual groupings
4. Create a hierarchical structure of relationships

### 3. Visualization

We will implement the visualization using:

- **D3.js** or **react-force-graph** for the core graph visualization
- Custom rendering with **Tailwind CSS** for the glassmorphic style
- **Framer Motion** for animations and interactions

### 4. User Interactions

The visualization will support:

- **Zooming** to focus on specific clusters
- **Panning** to navigate the semantic landscape
- **Clicking** on nodes to see detailed information
- **Dragging** nodes to reorganize the visualization
- **Highlighting** paths between selected words
- **Filtering** by relationship type or strength

## Implementation Phases

### Phase 1: Data Integration

1. Create API route for semantic data generation
2. Integrate with Perplexity/Grok
3. Implement data transformation and filtering
4. Add caching layer for performance

### Phase 2: Basic Visualization

1. Implement force-directed graph layout
2. Create basic node and link rendering
3. Add basic interactions (click, hover)
4. Integrate with the search functionality

### Phase 3: Enhanced Interactions

1. Add animations for transitions
2. Implement semantic zooming
3. Add filtering and highlighting
4. Enable saving and sharing visualizations

### Phase 4: Refinement

1. Optimize performance for larger graphs
2. Add accessibility features
3. Implement responsive design adaptations
4. Polish visual design and animations

## Mockup Design

```
                  +------------+
                  | "eloquent" |
                  +------------+
                        |
         +-----------------------------+
         |              |              |
    +-----------+ +------------+ +------------+
    | "articul- | | "fluent"   | | "persuasi-|
    |  ate"     | |            | |  ve"       |
    +-----------+ +------------+ +------------+
         |              |              |
    +-----------+ +------------+ +------------+
    | "verbal"  | | "smooth"   | | "compell- |
    |           | |            | |  ing"      |
    +-----------+ +------------+ +------------+
```

## Technical Considerations

### Performance

- Limit initial visualization to ~30 nodes for performance
- Use WebGL rendering for larger graphs
- Implement progressive loading for expanded exploration
- Use web workers for layout calculations

### Accessibility

- Provide keyboard navigation
- Include screen reader descriptions
- Offer alternative text-based view
- Support high contrast mode

### Mobile Experience

- Adapt visualization for touch interactions
- Simplify view on smaller screens
- Use responsive sizing
- Optimize touch targets

## Integration with Visual Mnemonics

The semantic clustering will integrate with visual mnemonics by:

1. Showing small visual indicators for nodes with available visuals
2. Allowing visual preview on hover
3. Using visual themes to represent different semantic domains
4. Enabling users to switch between text and visual modes

## Resources and References

- [Force-directed Graph Layout Algorithm](https://en.wikipedia.org/wiki/Force-directed_graph_drawing)
- [D3.js Force Layout](https://github.com/d3/d3-force)
- [React Force Graph](https://github.com/vasturiano/react-force-graph)
- [Framer Motion API](https://www.framer.com/motion/)
- [Semantic Network Visualization Best Practices](https://www.visualcinnamon.com/2015/11/learnings-from-a-d3-js-addict-on-starting-with-canvas/)

## Next Steps

1. Create an API route skeleton for semantic data
2. Implement a basic proof-of-concept visualization
3. Define the data transformation pipeline
4. Benchmark performance and refine approach```


📚 File: docs/authentication-plan.md
───────────────────────────────────────────────────
```md
# Authentication and User Management Plan

## Overview

Authentication and user management are essential for Deep Words to offer personalized experiences, save user history, and implement the subscription model outlined in the PRD. This document outlines the approach for implementing a secure, scalable authentication system.

## Technical Approach

We will implement authentication using NextAuth.js (Auth.js), which provides a flexible, secure framework for handling authentication in Next.js applications.

### 1. Authentication Providers

We'll support the following authentication methods:

- **Email/Password**: Traditional signup with email verification
- **OAuth**: Social login via:
  - Google
  - GitHub
  - Apple (for mobile users)
- **Magic Links**: Passwordless email login

### 2. User Data Structure

```typescript
interface User {
  id: string;
  email: string;
  name?: string;
  image?: string;
  plan: 'free' | 'professional' | 'enterprise';
  createdAt: Date;
  updatedAt: Date;
  settings: UserSettings;
}

interface UserSettings {
  theme: 'light' | 'dark' | 'system';
  visualMnemonicsEnabled: boolean;
  semanticClusteringEnabled: boolean;
  historyEnabled: boolean;
}
```

### 3. Database Integration

We'll use Prisma with PostgreSQL for user data storage:

```typescript
// Prisma schema excerpt
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  plan          String    @default("free")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  searches      Search[]
  collections   Collection[]
}

model Search {
  id        String   @id @default(cuid())
  query     String
  timestamp DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Collection {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  words       Word[]
}

model Word {
  id           String     @id @default(cuid())
  word         String
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
}
```

## Implementation Phases

### Phase 1: Basic Authentication

1. Set up NextAuth.js with a simple provider (Google)
2. Create login/signup pages with glassmorphic design
3. Implement protected routes and middleware
4. Add user context provider for client components

### Phase 2: User Profiles and Settings

1. Create user profile page
2. Implement settings management
3. Add avatar and personal information editing
4. Implement theme preferences

### Phase 3: Subscription Integration

1. Add subscription tiers
2. Integrate with Stripe for payments
3. Implement feature gating based on subscription
4. Add subscription management UI

### Phase 4: Advanced Features

1. Implement organization accounts for enterprise tier
2. Add team collaboration features
3. Implement API key generation for developer access
4. Add SSO for enterprise accounts

## User Experience Flow

```
┌─────────────┐     ┌─────────────┐     ┌─────────────┐
│  Landing    │────>│  Sign Up    │────>│ Onboarding  │
│  Page       │     │  / Login    │     │  Flow       │
└─────────────┘     └─────────────┘     └─────────────┘
                                               │
                                               ▼
┌─────────────┐     ┌─────────────┐     ┌─────────────┐
│  Settings   │<────│  Dashboard  │<────│ Feature     │
│  Profile    │     │  Home       │     │ Exploration │
└─────────────┘     └─────────────┘     └─────────────┘
      │                    ▲                   │
      │                    │                   ▼
      │              ┌─────────────┐     ┌─────────────┐
      └─────────────>│ Subscription│<────│ Feature     │
                     │ Management  │     │ Limitation  │
                     └─────────────┘     └─────────────┘
```

## Security Considerations

1. **CSRF Protection**: Implemented via NextAuth.js built-in protection
2. **Rate Limiting**: Apply rate limiting to login attempts
3. **Password Requirements**: Strong password policies
4. **Session Management**: Secure handling of sessions with proper expiration
5. **API Endpoint Protection**: Middleware to verify auth status

## Subscription Tiers Implementation

### Free Tier
- Limited searches per day
- Basic word information
- No history saving
- No collections
- Visual mnemonics with watermark

### Professional Tier ($9.99/month)
- Unlimited searches
- Full word information
- History and collections
- High-quality visual mnemonics
- Export functionality
- Semantic clustering

### Enterprise Tier ($49.99/month)
- All Professional features
- Team collaboration
- SSO integration
- API access
- Custom branding
- Priority support

## Technical Implementation Details

### NextAuth.js Configuration

```typescript
// Example NextAuth configuration
export const authOptions: NextAuthOptions = {
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID as string,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,
    }),
    CredentialsProvider({
      // Implementation details
    }),
    // Other providers
  ],
  adapter: PrismaAdapter(prisma),
  session: {
    strategy: "jwt",
  },
  pages: {
    signIn: '/auth/signin',
    signOut: '/auth/signout',
    error: '/auth/error',
    verifyRequest: '/auth/verify-request',
    newUser: '/auth/new-user'
  },
  callbacks: {
    // Custom callbacks for extending functionality
  },
};
```

### Route Protection Middleware

```typescript
// Example middleware for protecting routes
export default function middleware(request: NextRequest) {
  const pathname = request.nextUrl.pathname;

  // Check if the path is protected
  if (isProtectedRoute(pathname)) {
    const token = request.cookies.get('next-auth.session-token');

    if (!token) {
      const url = new URL('/auth/signin', request.url);
      url.searchParams.set('callbackUrl', pathname);
      return NextResponse.redirect(url);
    }
  }

  return NextResponse.next();
}
```

## Next Steps

1. Set up NextAuth.js with basic configuration
2. Create authentication UI components
3. Implement Prisma schema for user data
4. Add protected routes for user-specific features
5. Create user context provider for client state```


📚 File: README.md
───────────────────────────────────────────────────
```md
# Deep Wordsmith

![Deep Wordsmith](public/words-logo.svg)

A premium neural-enhanced linguistic exploration platform that transcends conventional reference tools by integrating multi-modal AI to create a seamless bridge between language conception and expression.

## Vision

Deep Wordsmith transforms language exploration from a utilitarian reference task to an inspirational creative process. It offers professionals contextually-aware semantic landscapes visualized through sophisticated glassmorphic design.

## Features

- **AI-Powered Language Understanding**: Contextual word exploration using Perplexity and Anthropic Claude ✅
- **Creative Word Suggestions**: Divergent thinking powered by Grok AI ✅
- **Visual Mnemonics**: Enhance word retention with AI-generated visual representations via Replicate Flux ✅
- **Semantic Clustering**: Visualize relationships between words and concepts (coming soon)
- **Glassmorphic UI**: VisionOS-inspired interface for a premium user experience ✅
- **Dark/Light Mode**: Automatic and manual theme switching ✅
- **Robust Error Handling**: Comprehensive error boundaries and fallbacks ✅
- **Optimized Performance**: Strategic caching with SWR ✅

## Tech Stack

- **Frontend**: Next.js 15 with App Router, React 19
- **Styling**: Tailwind CSS with custom glassmorphic design system
- **UI Components**: Custom components with Radix UI primitives
- **State Management**: SWR for data fetching and caching
- **Type Safety**: TypeScript throughout the codebase
- **AI Integration**:
  - Replicate API with Flux model for image generation
  - Perplexity API for contextual language understanding
  - Grok API for creative word suggestions
  - Anthropic Claude for advanced linguistic analysis

## Architecture

The project follows a modular architecture with:

1. **API Service Layer**: Standardized services for each AI provider
2. **Caching Strategy**: Optimized data fetching with SWR
3. **Error Handling**: Comprehensive boundaries and fallbacks
4. **UI Components**: Reusable, accessible components

## Getting Started

1. Clone the repository:
   ```bash
   git clone https://github.com/yourusername/deep-wordsmith.git
   cd deep-wordsmith
   ```

2. Install dependencies:
   ```bash
   npm install --legacy-peer-deps
   ```

3. Set up environment variables:
   ```bash
   cp .env.local.example .env.local
   ```
   Edit `.env.local` to add your API tokens.

4. Run the development server:
   ```bash
   npm run dev
   ```

5. Open [http://localhost:3000](http://localhost:3000) in your browser.

## Deployment

### GitHub Setup

We've included a helper script to set up your GitHub repository:

```bash
./scripts/setup-github.sh
```

This script will:
- Initialize a Git repository if needed
- Create a `.gitignore` file
- Create a GitHub repository
- Push your code to GitHub

### Vercel Deployment

To deploy to Vercel:

1. Install Vercel CLI:
   ```bash
   npm install -g vercel
   ```

2. Log in to Vercel:
   ```bash
   vercel login
   ```

3. Deploy your project:
   ```bash
   vercel
   ```

4. For production deployment:
   ```bash
   vercel --prod
   ```

Make sure to set up your environment variables in the Vercel dashboard.

## API Integration

### Replicate for Image Generation

The application uses Replicate's Flux model for generating visual mnemonics with:

- Comprehensive error handling with fallback images
- Automatic prompt enhancement for better results
- Progressive image loading
- Client-side caching for performance

### Perplexity for Contextual Understanding

Provides semantic understanding with:

- Contextual word search
- Related terms exploration
- Usage examples

### Grok for Creative Suggestions

Offers creative word suggestions with:

- Synonyms and antonyms
- Related concepts
- Creative alternatives

### Anthropic Claude for Linguistic Analysis

Provides deep linguistic analysis with:

- Etymology and historical context
- Semantic analysis
- Common collocations and usage patterns
- Related concepts and semantic associations

## Environment Variables

The following environment variables are required:

```
# Replicate (for image generation)
REPLICATE_API_TOKEN=your_token_here
REPLICATE_FLUX_MODEL=black-forest-labs/flux-1.1-pro

# Perplexity (for contextual understanding)
PERPLEXITY_API_KEY=your_key_here
PERPLEXITY_API_URL=https://api.perplexity.ai

# Grok (for creative suggestions)
GROK_API_KEY=your_key_here
GROK_API_URL=https://api.grok.ai

# Anthropic (for linguistic analysis)
ANTHROPIC_API_KEY=your_key_here
ANTHROPIC_API_URL=https://api.anthropic.com
ANTHROPIC_MODEL=claude-3-7-sonnet
```

## Project Structure

```
deep-wordsmith/
├── public/             # Static assets
│   └── fallback/       # Fallback images
├── scripts/            # Utility scripts
├── src/                # Source code
│   ├── app/            # Next.js app router
│   │   ├── api/        # API routes
│   │   └── page.tsx    # Main application page
│   ├── components/     # React components
│   ├── hooks/          # Custom React hooks
│   ├── lib/            # Utility functions
│   └── styles/         # Global styles
├── .env.local.example  # Example environment variables
├── package.json        # Project dependencies
└── README.md           # Project documentation
```

## Roadmap to World-Class Status

1. **Core Experience Enhancements**
   - Add semantic clustering visualization
   - Implement user authentication and history
   - Create export functionality to common platforms

2. **Technical Improvements**
   - Add comprehensive caching strategy
   - Implement server-side streaming for AI responses
   - Add client-side result persistence

3. **Visual & UX Refinements**
   - Add subtle animations for transitions
   - Enhance mobile experience
   - Add keyboard shortcuts for power users

4. **Quality & Performance**
   - Set up comprehensive testing suite
   - Add telemetry for performance monitoring
   - Optimize bundle size and loading performance

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Acknowledgments

- [Next.js](https://nextjs.org/)
- [Tailwind CSS](https://tailwindcss.com/)
- [Radix UI](https://www.radix-ui.com/)
- [SWR](https://swr.vercel.app/)
- [Replicate](https://replicate.com/)
- [Perplexity AI](https://www.perplexity.ai/)
- [Anthropic Claude](https://www.anthropic.com/)
```


📚 File: PRD-DRAFT.md
───────────────────────────────────────────────────
```md
# DEEP WORDSMITH: PRODUCT REQUIREMENTS DOCUMENT

## Product Overview
Deep Wordsmith is a neural-enhanced linguistic exploration platform that serves as an extension of the creative mind. It transcends conventional reference tools by integrating multi-modal AI (Perplexity, Grok, Anthropic Claude, and Replicate Flux) to create a seamless bridge between language conception and expression, offering professionals contextually-aware semantic landscapes visualized through sophisticated design.

## Market Problem & Opportunity
Traditional thesaurus and language reference tools lack:
1. Visual representation of linguistic concepts
2. Contextual understanding of the user's intent
3. Premium, frictionless UX designed for creative flow
4. Personalized language experiences that learn from usage

Deep Wordsmith addresses these gaps by creating a premium, AI-enhanced experience that transforms language exploration from a utilitarian reference task to an inspirational creative process.

## Target Users
- Writers (professional and aspiring)
- Content creators
- Marketing professionals
- Academics and researchers
- Creative professionals in various fields
- Non-native English speakers seeking nuanced expression

## Value Proposition
Deep Wordsmith empowers users to:
- Discover perfect word choices faster with AI that understands context
- Visualize linguistic concepts through generated imagery that enhances retention
- Explore semantic landscapes rather than flat lists of synonyms
- Maintain a persistent, personalized language workspace that evolves with use
- Access an aesthetically stunning interface that enhances creative flow

## Key Features and Requirements

### 1. Core Search Experience
- **Contextual Word Search**: Use AI to understand the user's context when searching for words
- **Semantic Clustering**: Display results in visual clusters showing relationships between concepts
- **Visual Mnemonics**: Generate relevant imagery to enhance understanding and retention
- **Historical Context**: Show etymology and evolution of words when relevant

### 2. AI Integration
- **Perplexity API**: For deep contextual language understanding and generation ✅
- **Grok API**: For creative and divergent word suggestions ✅
- **Replicate Flux**: For generating visual representations of words and concepts ✅
- **Anthropic Claude**: For advanced linguistic analysis and etymology exploration ✅

### 3. User Interface & Experience
- **Glassmorphic Design**: VisionOS-inspired translucent interface elements ✅
- **Touch Optimization**: Intuitive gesture controls for mobile and tablet use
- **Dark/Light Mode**: Automatic and manual theme switching ✅
- **Responsive Design**: Full functionality across devices of all sizes ✅

### 4. User Personalization
- **User Accounts**: Secure login with OAuth options
- **History Timeline**: Visualized journey of word explorations
- **Personal Collections**: Ability to save word clusters for future reference
- **AI Tuning**: User-adjustable AI creativity level slider

### 5. Export & Integration
- **One-Click Export**: Save word collections to various formats
- **Integration with Creative Tools**: Direct export to Notion, Google Docs, etc.
- **API Access**: For power users to integrate with custom workflows

### 6. Monetization Strategy
- **Tiered Subscription Model**:
  - Free Tier: Basic word search with limited AI suggestions
  - Professional Tier ($9.99/month): Full AI features, export options
  - Enterprise Tier ($49.99/month): Team collaboration, API access, priority support

### 7. Performance Requirements
- **Response Time**: <500ms for text results, <3s for visual elements ✅
- **Availability**: 99.9% uptime
- **Offline Capability**: Basic functionality without internet connection

## Implementation Phases

### Phase 1: MVP (Completed) ✅
- Core API service layer with proper error handling and fallbacks
- Integration with Replicate, Perplexity, Grok, and Anthropic
- Data caching strategy with SWR for optimized performance
- Basic UI components with glassmorphic design
- Error boundaries and loading states
- Responsive layouts with Tailwind CSS

### Phase 2: Enhanced Features (In Progress)
- User authentication and account management
- Semantic clustering visualization
- Personalized collections and history
- Export functionality
- Deployment pipeline and monitoring

### Phase 3: Premium Features (Planned)
- Team collaboration features
- Advanced analytics for language usage
- API access for developers
- Mobile-optimized experience
- Subscription management

## Technical Architecture

### Current Implementation ✅

#### 1. API Service Layer
- **Base Service**: Abstract base class with standardized error handling
- **Flux Service**: Image generation with fallbacks
- **Perplexity Service**: Contextual language understanding
- **Grok Service**: Creative word suggestions
- **Anthropic Service**: Advanced linguistic analysis

#### 2. Caching Strategy
- **SWR**: Smart caching with stale-while-revalidate pattern
- **Custom Hooks**: Type-safe hooks for each service
- **Optimistic Updates**: For improved perceived performance
- **Graduated Caching**: Different strategies for different data types

#### 3. Error Handling
- **Error Boundaries**: Component-level error isolation
- **Fallback UI**: Consistent error displays
- **Service Fallbacks**: Mock data generation when services unavailable
- **Retry Logic**: Automatic retries for transient failures

#### 4. UI Components
- **Glassmorphic Design System**: Custom Tailwind extensions
- **Loading States**: Skeleton loaders and spinners
- **Responsive Layouts**: Mobile-first approach
- **Accessibility**: ARIA attributes and keyboard navigation

### Planned Enhancements

#### 1. Authentication & User Management
- **NextAuth.js**: For secure authentication
- **Prisma**: For database access
- **JWT**: For stateless sessions
- **Role-Based Access**: For different subscription tiers

#### 2. Semantic Clustering
- **Force-Directed Graph**: For visualizing word relationships
- **D3.js**: For interactive visualizations
- **Clustering Algorithm**: For organizing related concepts
- **User Interaction**: For exploring the semantic space

#### 3. Export & Integration
- **PDF Generation**: For downloadable summaries
- **Markdown Export**: For easy integration with note-taking apps
- **API Endpoints**: For programmatic access
- **OAuth Integration**: For third-party service connections

## Success Metrics
- User acquisition: 10,000 users within first 3 months
- Retention: >40% monthly active user retention
- Conversion: 5% free-to-paid conversion rate
- Engagement: Average session time >3 minutes
- NPS: Net Promoter Score >40 within 6 months

## Deployment Strategy

### Current Deployment Plan ✅
1. **Vercel**: Primary hosting platform
2. **GitHub**: Version control and CI/CD
3. **Environment Variables**: Secure API key management
4. **Monitoring**: Basic error tracking and analytics

### Future Enhancements
1. **Edge Functions**: For low-latency global access
2. **CDN**: For static asset delivery
3. **Server-Side Rendering**: For improved SEO and performance
4. **Serverless Functions**: For scalable API endpoints

## Risks and Mitigations
1. **API Costs**: Implement caching strategies and result reuse to minimize API calls ✅
2. **User Adoption**: Focus on free tier value to drive organic growth before monetization
3. **Competitive Response**: Maintain rapid innovation cycle to stay ahead of market
4. **Performance Issues**: Implement progressive loading and optimization strategies ✅

## Conclusion
Deep Wordsmith represents a paradigm shift in language reference tools, moving from utilitarian word lists to an immersive, AI-enhanced creative companion. Our implementation has established a solid foundation with a robust API service layer, efficient caching, and an elegant UI system. By continuing to execute on this vision with a focus on premium UX and genuine user value, we aim to create not just a product but an indispensable tool in the creative arsenal of professionals worldwide.```


🟦 File: src/lib/utils.ts
───────────────────────────────────────────────────
```ts
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

/**
 * Combines class names with Tailwind CSS class merging
 * @param inputs - Class values to be merged
 * @returns Merged class string
 */
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

/**
 * Formats a date to a readable string
 * @param date - Date to format
 * @returns Formatted date string
 */
export function formatDate(date: Date): string {
  return new Intl.DateTimeFormat("en-US", {
    month: "long",
    day: "numeric",
    year: "numeric",
  }).format(date);
}

/**
 * Delays execution for a specified time
 * @param ms - Milliseconds to delay
 * @returns Promise that resolves after the delay
 */
export function delay(ms: number): Promise<void> {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

/**
 * Truncates a string to a maximum length with ellipsis
 * @param str - String to truncate
 * @param maxLength - Maximum length
 * @returns Truncated string
 */
export function truncateString(str: string, maxLength: number): string {
  if (str.length <= maxLength) return str;
  return str.slice(0, maxLength) + "...";
}

/**
 * Creates a debounced function that delays invoking the provided function
 * @param func - Function to debounce
 * @param wait - Wait time in milliseconds
 * @returns Debounced function
 */
export function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout | null = null;

  return function(...args: Parameters<T>): void {
    const later = () => {
      timeout = null;
      func(...args);
    };

    if (timeout) clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}```


🟦 File: src/lib/swr-config.ts
───────────────────────────────────────────────────
```ts
/**
 * SWR Configuration
 * Global configuration for SWR data fetching and caching
 */
import { SWRConfiguration } from 'swr';

/**
 * Default global SWR configuration
 */
export const SWR_CONFIG: SWRConfiguration = {
  // Default interval in milliseconds to refresh data (0 = disabled)
  refreshInterval: 0,

  // Time in milliseconds after which data is considered stale
  // 5 minutes for most data
  dedupingInterval: 300000,

  // Whether to revalidate on focus (when tab becomes active)
  revalidateOnFocus: false,

  // Whether to revalidate on reconnect (when browser regains connection)
  revalidateOnReconnect: true,

  // Error retry settings
  errorRetryCount: 3,

  // Use localStorage for persistence (implemented via custom cache below)
  // This is handled automatically by SWR
};

/**
 * SWR configuration for image-related data
 * Uses more aggressive caching since images don't change often
 */
export const IMAGE_SWR_CONFIG: SWRConfiguration = {
  ...SWR_CONFIG,
  dedupingInterval: 3600000, // 1 hour
  errorRetryCount: 2,
};

/**
 * SWR configuration for language-related data
 * Uses less aggressive caching since language data can change
 */
export const LANGUAGE_SWR_CONFIG: SWRConfiguration = {
  ...SWR_CONFIG,
  dedupingInterval: 120000, // 2 minutes
  revalidateOnFocus: true,
};```


🟦 File: src/lib/env.ts
───────────────────────────────────────────────────
```ts
/**
 * Environment Variable Utilities
 *
 * This module provides safe access to environment variables with proper typing and validation.
 */

/**
 * Get an environment variable with validation
 *
 * @param key The environment variable key
 * @param defaultValue Optional default value if not found
 * @param required Whether the environment variable is required
 * @returns The environment variable value or default
 */
export function getEnv(
  key: string,
  defaultValue?: string,
  required = false
): string | undefined {
  const value = process.env[key];

  // Log the status in development for debugging
  if (process.env.NODE_ENV === 'development') {
    if (!value) {
      console.warn(`⚠️ Environment variable ${key} not found${required ? ' (REQUIRED)' : ''}`);
    } else {
      console.log(`✅ Environment variable ${key} loaded successfully`);
    }
  }

  // If the value is required but not found, throw an error
  if (required && !value && !defaultValue) {
    throw new Error(`Required environment variable ${key} is missing`);
  }

  return value || defaultValue;
}

/**
 * Get a boolean environment variable
 *
 * @param key The environment variable key
 * @param defaultValue Default value if not found
 * @returns The boolean value
 */
export function getBoolEnv(key: string, defaultValue = false): boolean {
  const value = getEnv(key);
  if (value === undefined) return defaultValue;
  return value.toLowerCase() === 'true';
}

/**
 * Get a required environment variable
 *
 * @param key The environment variable key
 * @throws Error if the environment variable is not found
 * @returns The environment variable value
 */
export function getRequiredEnv(key: string): string {
  const value = getEnv(key, undefined, true);
  if (!value) {
    throw new Error(`Required environment variable ${key} is missing`);
  }
  return value;
}

/**
 * Get a number environment variable
 *
 * @param key The environment variable key
 * @param defaultValue Default value if not found
 * @returns The number value
 */
export function getNumberEnv(key: string, defaultValue?: number): number | undefined {
  const value = getEnv(key);
  if (value === undefined) return defaultValue;
  const num = Number(value);
  return isNaN(num) ? defaultValue : num;
}```


🟦 File: src/lib/api/index.ts
───────────────────────────────────────────────────
```ts
/**
 * API Services Export
 * Central export for all API services to provide a clean import interface
 */

// Export all service instances
export { fluxService } from './flux-service';
export { perplexityService } from './perplexity-service';
export { grokService } from './grok-service';
export { anthropicService } from './anthropic-service';

// Export types
export * from './types/api-types';

// Re-export the base service for extension
export { ApiService } from './api-service';```


🟦 File: src/lib/ai-config.ts
───────────────────────────────────────────────────
```ts
/**
 * AI Service Configuration
 * Contains settings for various AI providers used in Deep Words
 */
import { getEnv, getBoolEnv } from './env';

// Configuration for various AI providers
export const AI_CONFIG = {
  replicate: {
    apiToken: getEnv('REPLICATE_API_TOKEN'),
    fluxModel: getEnv('REPLICATE_FLUX_MODEL', 'black-forest-labs/flux-1.1-pro'),
    // Add fallback options
    fallback: {
      enabled: getBoolEnv('ENABLE_FALLBACK_IMAGES', true),
      localImages: [
        '/fallback/language-1.svg',
        '/fallback/language-2.svg',
        '/fallback/language-3.svg',
      ],
      placeholderUrl: '/fallback/image-placeholder.svg',
    },
  },
  perplexity: {
    apiUrl: getEnv('PERPLEXITY_API_URL', 'https://api.perplexity.ai'),
    apiKey: getEnv('PERPLEXITY_API_KEY'),
    defaultModel: 'sonar-small-online',
  },
  grok: {
    apiUrl: getEnv('GROK_API_URL', 'https://api.grok.ai'),
    apiKey: getEnv('GROK_API_KEY'),
    defaultModel: 'grok-1',
  },
  anthropic: {
    apiUrl: getEnv('ANTHROPIC_API_URL', 'https://api.anthropic.com'),
    apiKey: getEnv('ANTHROPIC_API_KEY'),
    defaultModel: getEnv('ANTHROPIC_MODEL', 'claude-3-7-sonnet'),
  },
};

// Log debug information in development
if (process.env.NODE_ENV === 'development') {
  console.log('AI Configuration initialized with providers:',
    Object.keys(AI_CONFIG).filter(key => {
      const config = AI_CONFIG[key as keyof typeof AI_CONFIG];
      // Check for either apiKey or apiToken, depending on the service
      return (config as any).apiKey !== undefined || (config as any).apiToken !== undefined;
    })
  );
}

// Type for response from image generation
export interface ImageGenerationResponse {
  url: string;
  prompt: string;
  model?: string;
  error?: any;
  fallback?: boolean;
}

// Create types for use elsewhere in the application
export type AIConfigType = typeof AI_CONFIG;```


🟦 File: src/app/api/generate-image/route.ts
───────────────────────────────────────────────────
```ts
import { NextResponse } from 'next/server';
import { AI_CONFIG, ImageGenerationResponse } from '@/lib/ai-config';
import Replicate from 'replicate';

/**
 * API handler for generating images using Replicate's Flux model
 * Includes comprehensive error handling and fallbacks
 */
export async function POST(request: Request) {
  try {
    // Parse request body
    const { prompt } = await request.json();

    // Validate input
    if (!prompt || typeof prompt !== 'string') {
      return NextResponse.json(
        { error: 'Invalid prompt. Please provide a text prompt.' },
        { status: 400 }
      );
    }

    // Log the request for debugging
    console.log(`📝 Image generation request for prompt: "${prompt}"`);

    // Check if the Replicate API token is available
    const { apiToken, fluxModel, fallback } = AI_CONFIG.replicate;

    if (!apiToken) {
      console.warn('⚠️ No Replicate API token found. Using fallback image.');
      return NextResponse.json(
        createFallbackResponse(prompt, 'No API token configured'),
        { status: 200 }
      );
    }

    // Call Replicate API
    try {
      // Initialize Replicate client
      const replicate = new Replicate({
        auth: apiToken,
      });

      // Prepare the request to Replicate
      const enhancedPrompt = enhancePrompt(prompt);

      console.log(`🤖 Sending request to Replicate for model: ${fluxModel}`);

      // Call Replicate API with Flux model
      const output = await replicate.run(
        fluxModel as `${string}/${string}` | `${string}/${string}:${string}`,
        {
          input: {
            prompt: enhancedPrompt,
            prompt_upsampling: true,
            width: 512,  // Standard size
            height: 512,
            num_inference_steps: 25,
            scheduler: "K_EULER",
            guidance_scale: 7.5,
          },
        }
      );

      // Replicate typically returns a URL or array of URLs
      // Let's handle both cases
      let imageUrl = '';
      if (Array.isArray(output)) {
        imageUrl = output[0];
      } else if (typeof output === 'string') {
        imageUrl = output;
      } else {
        throw new Error('Unexpected response format from Replicate');
      }

      // Return the generated image URL
      const imageResponse: ImageGenerationResponse = {
        url: imageUrl,
        prompt,
        model: fluxModel,
      };

      console.log('✅ Image successfully generated from Replicate');
      return NextResponse.json(imageResponse, { status: 200 });
    } catch (error) {
      // Handle errors from Replicate
      console.error('❌ Error calling Replicate API:', error);
      return NextResponse.json(
        createFallbackResponse(prompt, error instanceof Error ? error.message : String(error)),
        { status: 200 }
      );
    }
  } catch (error) {
    // Handle any other errors
    console.error('❌ Server error in image generation route:', error);
    return NextResponse.json(
      { error: 'Internal server error', fallback: true },
      { status: 500 }
    );
  }
}

/**
 * Creates a fallback response when image generation fails
 */
function createFallbackResponse(prompt: string, errorMessage: string): ImageGenerationResponse {
  const { fallback } = AI_CONFIG.replicate;

  // Select a random fallback image if available
  let fallbackUrl = fallback.placeholderUrl;
  if (fallback.enabled && fallback.localImages.length > 0) {
    const randomIndex = Math.floor(Math.random() * fallback.localImages.length);
    fallbackUrl = fallback.localImages[randomIndex];
  }

  return {
    url: fallbackUrl,
    prompt,
    error: errorMessage,
    fallback: true,
  };
}

/**
 * Enhances the user prompt for better image generation results
 */
function enhancePrompt(basePrompt: string): string {
  // Add styling and quality keywords to improve generation results
  return `${basePrompt}, high quality, detailed, 4k, professional, clear visualization, educational, minimalist style, elegant design`;
}```


🟦 File: src/app/api/analyze-language/route.ts
───────────────────────────────────────────────────
```ts
import { NextResponse } from 'next/server';
import { anthropicService } from '@/lib/api';

/**
 * API handler for advanced linguistic analysis using Anthropic Claude
 * This route accepts a word or phrase and returns detailed analysis
 */
export async function POST(request: Request) {
  try {
    // Parse request body
    const { text } = await request.json();

    // Validate input
    if (!text || typeof text !== 'string') {
      return NextResponse.json(
        { error: 'Invalid text. Please provide a word or phrase to analyze.' },
        { status: 400 }
      );
    }

    // Log the request for debugging
    console.log(`📝 Language analysis request for: "${text}"`);

    // Call Anthropic service to analyze the text
    const result = await anthropicService.analyzeLanguage(text);

    // Check if there was an error
    if (!result.success || result.error) {
      console.error('❌ Error in language analysis:', result.error);

      return NextResponse.json(
        {
          error: result.error?.message || 'Failed to analyze language',
          code: result.error?.code || 'UNKNOWN_ERROR',
        },
        { status: result.status || 500 }
      );
    }

    // Return the analysis result
    console.log('✅ Language analysis completed successfully');
    return NextResponse.json(result.data, { status: 200 });
  } catch (error) {
    // Handle any other errors
    console.error('❌ Server error in language analysis route:', error);
    return NextResponse.json(
      { error: 'Internal server error', details: error instanceof Error ? error.message : String(error) },
      { status: 500 }
    );
  }
}

/**
 * For GET requests, return an explanation of how to use this API
 */
export async function GET() {
  return NextResponse.json({
    info: 'Language Analysis API',
    usage: 'Send a POST request with a JSON body containing a "text" field with the word or phrase to analyze',
    example: {
      request: { text: 'eloquent' },
      response: {
        etymology: { /* origin, history, etc */ },
        semantics: { /* meaning, nuances, etc */ },
        usage: { /* examples, collocations, etc */ },
        related: { /* synonyms, antonyms, etc */ },
        register: { /* formality, connotation, etc */ }
      }
    }
  }, { status: 200 });
}```


🟦 File: scripts/test-flux-api.ts
───────────────────────────────────────────────────
```ts
/**
 * Replicate Test Script for Flux Model
 * This script can be used to test the Replicate API with Flux model directly without going through the UI
 *
 * Usage:
 * 1. Set the REPLICATE_API_TOKEN environment variable
 * 2. Run this script with ts-node:
 *    npx ts-node scripts/test-flux-api.ts "your prompt here"
 */

import Replicate from 'replicate';
import fs from 'fs';
import path from 'path';
import fetch from 'node-fetch';

// Get API token from environment or .env file
const apiToken = process.env.REPLICATE_API_TOKEN;
const fluxModel = process.env.REPLICATE_FLUX_MODEL || 'black-forest-labs/flux-1.1-pro';

async function generateImage(prompt: string) {
  console.log(`🔍 Testing Replicate API with prompt: "${prompt}"`);

  if (!apiToken) {
    console.error('❌ No REPLICATE_API_TOKEN found in environment variables');
    console.log('Please set the REPLICATE_API_TOKEN environment variable and try again');
    return;
  }

  try {
    console.log('Initializing Replicate client...');
    const replicate = new Replicate({
      auth: apiToken,
    });

    const enhancedPrompt = `${prompt}, high quality, detailed, 4k, professional, clear visualization, educational, minimalist style, elegant design`;

    console.log(`🤖 Sending request to Replicate for model: ${fluxModel}`);
    console.log('This may take a moment...');

    const output = await replicate.run(
      fluxModel as `${string}/${string}` | `${string}/${string}:${string}`,
      {
        input: {
          prompt: enhancedPrompt,
          prompt_upsampling: true,
          width: 512,
          height: 512,
          num_inference_steps: 25,
          scheduler: "K_EULER",
          guidance_scale: 7.5,
        },
      }
    );

    // Handle the output based on its type
    let imageUrl = '';
    if (Array.isArray(output)) {
      imageUrl = output[0];
    } else if (typeof output === 'string') {
      imageUrl = output;
    } else {
      console.error('❌ Unexpected response format from Replicate:', output);
      return;
    }

    console.log('✅ Success! Image URL:', imageUrl);

    // Download the image
    if (imageUrl) {
      await downloadImage(imageUrl, prompt);
    }
  } catch (error) {
    console.error('❌ Error:', error);
  }
}

async function downloadImage(url: string, prompt: string) {
  try {
    console.log('Downloading image...');

    const response = await fetch(url);
    const buffer = await response.buffer();

    // Create output directory if it doesn't exist
    const outputDir = path.join(process.cwd(), 'test-output');
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir);
    }

    // Save the image
    const sanitizedPrompt = prompt.replace(/[^a-z0-9]/gi, '_').toLowerCase();
    const outputPath = path.join(outputDir, `${sanitizedPrompt}_${Date.now()}.png`);
    fs.writeFileSync(outputPath, buffer);

    console.log(`✅ Image saved to: ${outputPath}`);
  } catch (error) {
    console.error('❌ Error downloading image:', error);
  }
}

// Main execution
const prompt = process.argv[2];
if (!prompt) {
  console.error('❌ Please provide a prompt as a command line argument');
  console.log('Example: npx ts-node scripts/test-flux-api.ts "a beautiful landscape"');
  process.exit(1);
}

generateImage(prompt);```


📚 File: docs/deployment.md
───────────────────────────────────────────────────
```md
# Deep Words Deployment Guide

This guide provides instructions for deploying the Deep Words application to various hosting platforms.

## Pre-Deployment Checklist

Before deploying to production, ensure:

1. All environment variables are properly set in `.env.production`
2. API keys are valid and have proper permissions
3. The application builds successfully locally
4. All features have been tested
5. SVG fallback images are working properly
6. API routes are functioning correctly

## Deployment Options

### Option 1: Vercel (Recommended)

Vercel is the recommended platform for Next.js applications.

1. **Install Vercel CLI** (optional, but helpful for testing):
   ```bash
   npm install -g vercel
   ```

2. **Configure Environment Variables**:
   - Create a `.env.production` file based on `.env.production.example`
   - Add all required environment variables to Vercel dashboard

3. **Deploy**:
   ```bash
   # Login to Vercel
   vercel login

   # Deploy to production
   vercel --prod
   ```

4. **Configure Build Settings** (if needed):
   - Build Command: `npm run build`
   - Output Directory: `.next`
   - Install Command: `npm install --legacy-peer-deps`

### Option 2: Netlify

1. **Install Netlify CLI**:
   ```bash
   npm install -g netlify-cli
   ```

2. **Create a `netlify.toml` file**:
   ```toml
   [build]
     command = "npm run build"
     publish = ".next"

   [build.environment]
     NODE_VERSION = "20.6.0"

   [[plugins]]
     package = "@netlify/plugin-nextjs"
   ```

3. **Configure Environment Variables**:
   - Add all variables from `.env.production` to Netlify dashboard

4. **Deploy**:
   ```bash
   # Login to Netlify
   netlify login

   # Deploy to production
   netlify deploy --prod
   ```

### Option 3: AWS Amplify

1. **Install Amplify CLI**:
   ```bash
   npm install -g @aws-amplify/cli
   ```

2. **Configure Amplify**:
   ```bash
   amplify configure
   ```

3. **Initialize Amplify in your project**:
   ```bash
   amplify init
   ```

4. **Add hosting**:
   ```bash
   amplify add hosting
   ```

5. **Deploy**:
   ```bash
   amplify publish
   ```

### Option 4: Custom Server

For a traditional server deployment:

1. **Build the application**:
   ```bash
   npm run build
   ```

2. **Transfer files to server**:
   ```bash
   # Example using rsync
   rsync -avz --delete .next/ package.json next.config.js public/ user@your-server:/path/to/app
   ```

3. **Install dependencies on server**:
   ```bash
   npm install --production --legacy-peer-deps
   ```

4. **Set environment variables on server**

5. **Start the application**:
   ```bash
   # Using PM2 (recommended)
   pm2 start npm --name "deep-wordsmith" -- start

   # Or directly
   npm start
   ```

## Post-Deployment Verification

After deployment, verify:

1. The application loads correctly
2. Environment variables are being read properly
3. API routes work as expected
4. Image generation functions properly
5. SVG fallbacks display correctly
6. The application works on mobile devices

## Troubleshooting Common Issues

### SVG Loading Issues

If SVG images fail to load, verify:
- `next.config.js` has `dangerouslyAllowSVG: true` in the images configuration
- SVG files are properly formatted with valid XML

### API Token Issues

If API tokens aren't recognized:
- Check that environment variables are properly set
- Verify the environment variable names match exactly what the code expects
- Try redeploying after clearing the cache

### Build Failures

If the build fails:
- Check for TypeScript errors
- Ensure all dependencies are installed
- Add the `--legacy-peer-deps` flag to npm install commands
- Verify Node.js version compatibility

## Continuous Deployment

For automated deployments, configure your Git provider with the hosting platform:

1. Connect your GitHub/GitLab repository to your hosting platform
2. Configure build settings
3. Set up environment variables securely
4. Enable automatic deployments on push to main/master branch```


📝 File: vercel.json
───────────────────────────────────────────────────
```json
{
  "name": "deep-wordsmith",
  "version": 2,
  "framework": "nextjs",
  "buildCommand": "npm run build",
  "outputDirectory": ".next",
  "installCommand": "npm install --legacy-peer-deps",
  "env": {
    "NEXT_PUBLIC_APP_URL": {
      "type": "string",
      "defaultValue": "https://deep-wordsmith.vercel.app"
    },
    "ENABLE_VISUAL_MNEMONICS": {
      "type": "boolean",
      "defaultValue": true
    },
    "ENABLE_SEMANTIC_CLUSTERS": {
      "type": "boolean",
      "defaultValue": true
    }
  },
  "headers": [
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "X-Frame-Options",
          "value": "DENY"
        },
        {
          "key": "X-XSS-Protection",
          "value": "1; mode=block"
        }
      ]
    }
  ]
}```


📝 File: tsconfig.json
───────────────────────────────────────────────────
```json
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
```


🟦 File: tailwind.config.ts
───────────────────────────────────────────────────
```ts
import type { Config } from "tailwindcss";
import { fontFamily } from "tailwindcss/defaultTheme";

export default {
  darkMode: ["class"],
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        glass: {
          DEFAULT: "var(--glass-bg)",
          border: "var(--glass-border)",
          highlight: "var(--glass-highlight)",
          shadow: "var(--glass-shadow)",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic": "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
      fontFamily: {
        sans: ["var(--font-geist-sans)", ...fontFamily.sans],
        mono: ["var(--font-geist-mono)", ...fontFamily.mono],
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
        shimmer: {
          "100%": {
            transform: "translateX(100%)",
          },
        },
        "glass-shimmer": {
          "0%": { backgroundPosition: "0% 0%" },
          "50%": { backgroundPosition: "100% 100%" },
          "100%": { backgroundPosition: "0% 0%" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        shimmer: "shimmer 2s infinite",
        "glass-shimmer": "glass-shimmer 10s ease infinite",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;
```


🟦 File: src/app/page.tsx
───────────────────────────────────────────────────
```tsx
import Image from "next/image";
import SearchBar from "@/components/search-bar";

export default function Home() {
  return (
    <div className="flex flex-col min-h-screen">
      {/* Header with Logo */}
      <header className="glass-effect z-10 sticky top-0 py-4 px-6 flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Image
            src="/words-logo.svg"
            alt="Deep Words"
            width={40}
            height={40}
            className="object-contain"
            priority
          />
          <h1 className="text-xl font-bold bg-gradient-to-r from-purple-600 via-blue-500 to-indigo-600 text-transparent bg-clip-text">
            Deep Words
          </h1>
        </div>
        <nav className="hidden md:flex items-center gap-4">
          <a href="#" className="text-sm font-medium hover:text-primary transition-colors">About</a>
          <a href="#" className="text-sm font-medium hover:text-primary transition-colors">Pricing</a>
          <a href="#" className="text-sm font-medium hover:text-primary transition-colors">Blog</a>
          <button className="glass-effect px-4 py-2 text-sm font-medium hover:bg-muted/70 transition-colors">
            Sign In
          </button>
        </nav>
      </header>

      {/* Main Content */}
      <main className="flex-1 flex items-center justify-center p-6 relative">
        <div className="absolute inset-0 bg-[radial-gradient(ellipse_at_top,_var(--tw-gradient-stops))] from-purple-200 via-transparent to-transparent dark:from-purple-900/20 dark:via-transparent dark:to-transparent -z-10" />

        <div className="max-w-3xl w-full mx-auto space-y-12 text-center">
          <div className="space-y-4">
            <h2 className="text-4xl md:text-5xl font-bold tracking-tight">
              Discover language through a
              <span className="relative ml-2">
                visual lens
                <span className="absolute -bottom-1 left-0 right-0 h-1 bg-gradient-to-r from-purple-600 to-blue-500 rounded-full"></span>
              </span>
            </h2>
            <p className="text-muted-foreground text-lg max-w-2xl mx-auto">
              Deep Words combines advanced AI with visual mnemonics to create a premium language exploration platform for creative professionals.
            </p>
          </div>

          <div className="glass-effect-intense p-6 md:p-8 rounded-2xl">
            <SearchBar />
            <p className="text-xs text-muted-foreground mt-4">
              Try typing "eloquent", "vibrant", or "serendipity"
            </p>
          </div>

          <div className="flex flex-col md:flex-row gap-4 justify-center">
            <div className="glass-effect p-4 rounded-xl flex items-center gap-2">
              <div className="h-8 w-8 rounded-full bg-purple-100 dark:bg-purple-900/30 flex items-center justify-center">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M9 10L12.2581 12.4436C12.6766 12.7574 13.2584 12.7103 13.6203 12.3346L20 6" stroke="currentColor" strokeWidth="2" strokeLinecap="round" />
                  <path d="M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" strokeWidth="2" />
                </svg>
              </div>
              <span className="text-sm">AI-Powered Context</span>
            </div>

            <div className="glass-effect p-4 rounded-xl flex items-center gap-2">
              <div className="h-8 w-8 rounded-full bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M2 6C2 4.34315 3.34315 3 5 3H19C20.6569 3 22 4.34315 22 6V18C22 19.6569 20.6569 21 19 21H5C3.34315 21 2 19.6569 2 18V6Z" stroke="currentColor" strokeWidth="2" />
                  <path d="M9 9L15 15" stroke="currentColor" strokeWidth="2" strokeLinecap="round" />
                  <path d="M15 9L9 15" stroke="currentColor" strokeWidth="2" strokeLinecap="round" />
                </svg>
              </div>
              <span className="text-sm">Visual Mnemonics</span>
            </div>

            <div className="glass-effect p-4 rounded-xl flex items-center gap-2">
              <div className="h-8 w-8 rounded-full bg-indigo-100 dark:bg-indigo-900/30 flex items-center justify-center">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M15 19L17 21L21 17" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                  <path d="M12 15V4M12 4L8 8M12 4L16 8" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                  <path d="M8 12H4M20 12H16" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                </svg>
              </div>
              <span className="text-sm">Export Anywhere</span>
            </div>
          </div>
        </div>
      </main>

      {/* Footer */}
      <footer className="glass-effect mt-auto py-6 px-6 text-center text-sm text-muted-foreground">
        <p>© 2024 Deep Words. All rights reserved.</p>
      </footer>
    </div>
  );
}
```


🟦 File: src/app/not-found.tsx
───────────────────────────────────────────────────
```tsx
import Link from 'next/link';

/**
 * 404 Not Found Page
 *
 * This page is shown when a user navigates to a route that doesn't exist.
 * It maintains the glassmorphic design aesthetic of the application.
 */
export default function NotFound() {
  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-blue-50 to-slate-100 dark:from-slate-900 dark:to-blue-950">
      <div className="relative w-full max-w-md p-8 overflow-hidden backdrop-blur-lg rounded-2xl border border-blue-100/20 dark:border-blue-800/20 shadow-xl bg-white/70 dark:bg-slate-900/70">
        <div className="absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-blue-400 to-indigo-500"></div>

        <div className="text-center space-y-6">
          <div className="mx-auto w-20 h-20 flex items-center justify-center rounded-full bg-blue-50 dark:bg-blue-900/20">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-10 w-10 text-blue-500 dark:text-blue-400"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <circle cx="12" cy="12" r="10" />
              <path d="M16 16s-1.5-2-4-2-4 2-4 2" />
              <line x1="9" y1="9" x2="9.01" y2="9" />
              <line x1="15" y1="9" x2="15.01" y2="9" />
            </svg>
          </div>

          <div className="space-y-3">
            <span className="inline-block px-3 py-1 text-sm font-medium text-blue-600 dark:text-blue-400 bg-blue-100 dark:bg-blue-900/30 rounded-full">
              404
            </span>
            <h1 className="text-2xl font-semibold text-slate-900 dark:text-white">
              Page Not Found
            </h1>
            <p className="text-slate-600 dark:text-slate-300 max-w-sm mx-auto">
              The page you're looking for doesn't exist or has been moved.
            </p>

            <div className="pt-6">
              <Link
                href="/"
                className="px-4 py-2 rounded-md bg-blue-600 text-white hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors inline-flex items-center space-x-2"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" />
                  <polyline points="9 22 9 12 15 12 15 22" />
                </svg>
                <span>Return Home</span>
              </Link>
            </div>

            <p className="text-xs text-slate-500 dark:text-slate-400 pt-4">
              Need help? Contact our support team
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}```


🟦 File: src/app/layout.tsx
───────────────────────────────────────────────────
```tsx
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { Toaster } from "sonner";
import { ThemeProvider } from "@/components/theme-provider";
import { cn } from "@/lib/utils";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Deep Words | Visual Linguistic Exploration",
  description: "Explore language with AI-powered visual mnemonics and contextual understanding",
  keywords: "thesaurus, ai, language tool, visual mnemonics, writing assistant",
  authors: [{ name: "Deep Words Team" }],
  viewport: "width=device-width, initial-scale=1",
  icons: {
    icon: "/favicon.ico",
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={cn(
          geistSans.variable,
          geistMono.variable,
          "antialiased min-h-screen bg-background"
        )}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          {children}
          <Toaster position="bottom-right" />
        </ThemeProvider>
      </body>
    </html>
  );
}
```


🎨 File: src/app/globals.css
───────────────────────────────────────────────────
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Base colors */
    --background: #ffffff;
    --foreground: #171717;

    /* Glass effect */
    --glass-bg: rgba(255, 255, 255, 0.8);
    --glass-border: rgba(255, 255, 255, 0.5);
    --glass-highlight: rgba(255, 255, 255, 0.9);
    --glass-shadow: rgba(31, 38, 135, 0.18);

    /* Shadcn UI variables */
    --radius: 0.75rem;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;

    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;

    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;

    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;

    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;

    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
  }

  @media (prefers-color-scheme: dark) {
    :root {
      /* Base colors */
      --background: #0a0a0a;
      --foreground: #ededed;

      /* Glass effect */
      --glass-bg: rgba(10, 10, 10, 0.75);
      --glass-border: rgba(40, 40, 40, 0.5);
      --glass-highlight: rgba(60, 60, 60, 0.4);
      --glass-shadow: rgba(0, 0, 0, 0.3);

      /* Shadcn UI variables */
      --border: 240 3.7% 15.9%;
      --input: 240 3.7% 15.9%;
      --ring: 240 4.9% 83.9%;

      --primary: 0 0% 98%;
      --primary-foreground: 240 5.9% 10%;

      --secondary: 240 3.7% 15.9%;
      --secondary-foreground: 0 0% 98%;

      --accent: 240 3.7% 15.9%;
      --accent-foreground: 0 0% 98%;

      --destructive: 0 62.8% 30.6%;
      --destructive-foreground: 0 0% 98%;

      --muted: 240 3.7% 15.9%;
      --muted-foreground: 240 5% 64.9%;

      --popover: 240 10% 3.9%;
      --popover-foreground: 0 0% 98%;

      --card: 240 10% 3.9%;
      --card-foreground: 0 0% 98%;
    }
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-feature-settings: "rlig" 1, "calt" 1;
}

@layer utilities {
  .glass-effect {
    background: var(--glass-bg);
    border: 1px solid var(--glass-border);
    box-shadow: 0 8px 32px 0 var(--glass-shadow);
    backdrop-filter: blur(4px);
    -webkit-backdrop-filter: blur(4px);
    border-radius: var(--radius);
  }

  .glass-effect-intense {
    background: var(--glass-bg);
    border: 1px solid var(--glass-border);
    box-shadow: 0 8px 32px 0 var(--glass-shadow);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border-radius: var(--radius);
  }

  .glass-highlight {
    position: relative;
    overflow: hidden;
  }

  .glass-highlight::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent 0%,
      var(--glass-highlight) 50%,
      transparent 100%
    );
    opacity: 0.6;
    animation: shimmer 2.5s infinite;
  }
}
```


🟦 File: src/app/error.tsx
───────────────────────────────────────────────────
```tsx
'use client';

import { useEffect } from 'react';

interface ErrorPageProps {
  error: Error & { digest?: string };
  reset: () => void;
}

/**
 * Global Error Component
 *
 * This component handles runtime errors in the application.
 * It displays a user-friendly error message and provides a way to recover.
 */
export default function ErrorPage({ error, reset }: ErrorPageProps) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error('Application error:', error);
  }, [error]);

  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-blue-50 to-slate-100 dark:from-slate-900 dark:to-blue-950">
      <div className="relative w-full max-w-md p-6 overflow-hidden backdrop-blur-lg rounded-2xl border border-blue-100/20 dark:border-blue-800/20 shadow-xl bg-white/70 dark:bg-slate-900/70">
        <div className="absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-blue-400 to-indigo-500"></div>

        <div className="text-center space-y-6">
          <div className="mx-auto w-20 h-20 flex items-center justify-center rounded-full bg-red-50 dark:bg-red-900/20">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-10 w-10 text-red-500 dark:text-red-400"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <circle cx="12" cy="12" r="10" />
              <line x1="12" y1="8" x2="12" y2="12" />
              <line x1="12" y1="16" x2="12.01" y2="16" />
            </svg>
          </div>

          <div className="space-y-2">
            <h1 className="text-2xl font-semibold text-slate-900 dark:text-white">
              Something went wrong
            </h1>
            <p className="text-slate-600 dark:text-slate-300 max-w-sm mx-auto">
              {process.env.NODE_ENV === 'development'
                ? error.message || 'An unexpected error occurred'
                : 'An unexpected error occurred while processing your request'}
            </p>

            {process.env.NODE_ENV === 'development' && (
              <div className="mt-4 p-4 bg-slate-800 text-slate-200 rounded-lg text-sm text-left overflow-x-auto">
                <code className="whitespace-pre-wrap break-all">
                  {error.stack}
                </code>
              </div>
            )}

            <div className="pt-4">
              <button
                onClick={reset}
                className="px-4 py-2 rounded-md bg-blue-600 text-white hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors"
              >
                Try again
              </button>
            </div>

            <p className="text-xs text-slate-500 dark:text-slate-400 pt-4">
              If this problem persists, please contact support
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}```


📝 File: package.json
───────────────────────────────────────────────────
```json
{
  "name": "deep-words",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "NEXT_DISABLE_ESLINT=1 next build",
    "build-check": "next build --no-lint",
    "start": "next start",
    "lint": "next lint",
    "verify": "node scripts/verify-deployment.js",
    "deploy": "npm run verify && vercel --prod"
  },
  "dependencies": {
    "@radix-ui/react-icons": "^1.3.0",
    "@radix-ui/react-slot": "^1.0.2",
    "@radix-ui/react-tabs": "^1.0.4",
    "@radix-ui/react-tooltip": "^1.0.7",
    "@sentry/nextjs": "^9.2.0",
    "@tanstack/react-query": "^5.66.9",
    "ai": "^4.1.46",
    "axios": "^1.7.9",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0",
    "eslint-config-prettier": "^10.0.1",
    "eslint-plugin-prettier": "^5.2.3",
    "framer-motion": "^11.0.8",
    "husky": "^9.1.7",
    "lint-staged": "^15.4.3",
    "lucide-react": "^0.358.0",
    "next": "15.1.7",
    "next-themes": "^0.3.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-error-boundary": "^5.0.0",
    "react-loading-skeleton": "^3.5.0",
    "react-resizable-panels": "^2.0.13",
    "replicate": "^1.0.1",
    "sonner": "^1.4.3",
    "swr": "^2.3.2",
    "tailwind-merge": "^2.2.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.22.4",
    "zustand": "^4.5.2"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@svgr/webpack": "^8.1.0",
    "@types/node": "^20",
    "@types/node-fetch": "^2.6.12",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.18",
    "eslint": "^9",
    "eslint-config-next": "15.1.7",
    "node-fetch": "^2.7.0",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}
```


📝 File: .vercel/project.json
───────────────────────────────────────────────────
```json
{"projectId":"prj_ZhkH1VRcQjtToFCk7r6O4G7dFOgT","orgId":"team_jUTsEuwVxDAOSAaiXYZlQFXA"}```


📝 File: .eslintrc.json
───────────────────────────────────────────────────
```json
{
  "extends": ["next/core-web-vitals"],
  "rules": {
    "react/no-unescaped-entities": 0,
    "@typescript-eslint/no-explicit-any": 0,
    "@typescript-eslint/no-unused-vars": 0,
    "react-hooks/exhaustive-deps": 0
  }
}```

📊 Dump Statistics
───────────────────────────────────────────────────
Total words: 0
Estimated tokens: 0
Generated on: Mon Feb 24 18:51:40 PST 2025
